#+TITLE: Emacs config
#+AUTHOR: Felix Dumbeck
#+PROPERTY: header-args:emacs-lisp :tangle ./init-new.el :mkdirp yes
* Preface
Simple "performant" GNU emacs 29.1+ config that uses as much built in stuff as possible
Werks for me
* Startup Performance
Make emacs startup faster
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

* Package Management
** Setup package repos
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
  ;; make all use-package :ensure t
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

* Keep .config/emacs clean

Stop transient files from being created in the emacs config folder

- Change the user-emacs-directory to keep unwanted things out of ~/.config/emacs
  #+begin_src emacs-lisp
    (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
          url-history-file (expand-file-name "url/history" user-emacs-directory))
  #+end_src
- Use no-littering to automatically set common paths to the new user-emacs-directory
  #+begin_src emacs-lisp
    (setup (:pkg no-littering)
           (require 'no-littering))
  #+end_src
- Keep customization settings in a temporary file (thanks Ambrevar!)
  #+begin_src emacs-lisp
    (setq custom-file
          (if (boundp 'server-socket-dir)
              (expand-file-name "custom.el" server-socket-dir)
            (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
    (load custom-file t)
  #+end_src

- Move customization variables to a sepereate file and load it *noeval*
  #+begin_src emacs-lisp :noeval
    (setq custom-file (locate-user-emacs-file "custom-vars.el"))
    (load custom-file 'noerror 'nomessage)
  #+end_src
- From backup files *noeval*
  #+begin_src emacs-lisp :noeval
    (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))  
  #+end_src
- auto-save files *noeval*
  #+begin_src emacs-lisp :noeval
    (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
    (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
          auto-save-file-name-transforms `((".*", (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
  #+end_src
  
* Keyboard bindings
** open config
shortcut to open the emacs config file with =C-c f P=
#+begin_src emacs-lisp
  (defun open-config ()
    "Opens emacs config file"
    (interactive)
    (setq find-file-visit-truename t)
    (find-file (locate-user-emacs-file "Emacs.org")))
  (global-set-key (kbd "C-c f P") 'open-config)

#+end_src
** kill buffer and close window
kill the current buffer and close its window with =C-x C-k=
#+begin_src emacs-lisp
  (defun kill-buffer-and-close-window ()
    "Kill the current buffer and close its window."
    (interactive)
    (kill-buffer)
    (delete-window))
  (global-set-key (kbd "C-x C-k") 'kill-buffer-and-close-window)			  
#+end_src
** kill line backwards
Kill line backwards from the position of the pointer to the beginning of the line. With =C-S-k=
#+begin_src emacs-lisp
  (defun kill-line-backward ()
    "Kill line backwards from the position of the pointer to the beginning of the line."
    (interactive)
    (kill-line 0))
  (global-set-key (kbd "C-S-k") 'kill-line-backward)
#+end_src
** which-key
which-key is great for getting an overview of what keybindings are available based on the prefix keys you entered.
#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src
* General
** User info
#+begin_src emacs-lisp
  (setq user-full-name "Felix"
        user-mail-address "f.dumbeck@campus.tu-berlin.de")
#+end_src

** User interface
*** behavoir
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src
flash when the bell rings
#+begin_src  emacs-lisp
  (setq visible-bell t)
#+end_src
*** remove GUI elements
#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
#+end_src
*** lines
enable line highlighting
#+begin_src emacs-lisp
  (global-hl-line-mode t)
#+end_src
prettify symbols
#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src
enable line wrapping
#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src
line numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode t) ;; enable line numbers
  (setq display-line-numbers-type 'relative) ;; make line numbers relative
#+end_src
  
** Theme
picks a light color-theme when the sun is risen and a dark theme when the sun is set
#+begin_src emacs-lisp
  (use-package gruvbox-theme)
  (use-package circadian
    :config
    (setq calendar-latitude 52.5)
    (setq calendar-longitude 13.4)
    (setq circadian-themes '((:sunrise . gruvbox-light-soft)
                             (:sunset  . gruvbox-dark-soft)))
    (circadian-setup))
#+end_src

** Font
*** icon font
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src
*** enable emojis ðŸ˜Ž
#+begin_src emacs-lisp
  (use-package emojify
    :init (emojify-mode))
#+end_src
** Various
show recently opened files
#+begin_src emacs-lisp
  (recentf-mode t)
#+end_src
save location in file
#+begin_src emacs-lisp
  (save-place-mode t)
#+end_src
Revert buffers when the underlying file has changed
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src
* Completion System
* Org-mode
** Defer startup
for an improved emacs startup time loading =org= is defered until it is actually needed
#+begin_src emacs-lisp
  (use-package org
    :defer t
    :commands (org-mode)
    )
#+end_src
** Functionality
add contrib package for extra features and add org-tempo for expanding structual blocks from shortcuts eg. =<sTAB= will turn into =#+begin_src #+end_src=
#+begin_src emacs-lisp
  
  (use-package org-contrib
    :init (require 'org-tempo)
    :after org
    )
#+end_src
export org-mode files to html with hugo
#+begin_src emacs-lisp
  (use-package ox-hugo
    :after org
    :commands org-hugo-auto-export-mode)
#+end_src
** Improve looks
#+begin_src emacs-lisp
  (setq org-startup-indented t
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-image-actual-width '(300))
#+end_src
Show hidden emphasis markers
#+begin_src emacs-lisp
  
  (use-package org-appear
    :hook (org-mode . org-appear-mode))
#+end_src
*** fonts and bullets
make bullet points and headings look nice
#+begin_src emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-special-todo
#+end_src
Nice bullets
#+begin_src emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-special-todo-items t))
#+end_src
change headings
#+begin_src emacs-lisp
  (custom-set-faces
   '(org-level-1 ((t (:height 1.75))))
   '(org-level-2 ((t (:height 1.5))))
   '(org-level-3 ((t (:height 1.25))))
   '(org-level-4 ((t (:height 1.1))))
   '(org-document-title ((t (:height 1.5)))))
#+end_src
give pasted links the title provided by the website
#+begin_src emacs-lisp
  (use-package org-cliplink
    :bind ("C-x p i" . org-cliplink)
    :hook (org-mode . org-cliplink))
#+end_src
** Code blocks
rust
#+begin_src emacs-lisp
  (use-package ob-rust
    :after org)
#+end_src
** Org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/Desktop/Notes/"))
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "\n* See also\n\n* Reference\n%?\n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n\n")
        :unnarrowed t)
       ("b" "book notes" plain
        "\n* Source\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n%?\n\n* See also\n\n* References\n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n\n")
        :unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode))
#+end_src
* Dired
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
* Develpment
** Git
*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :commands magit)
#+end_src
** Treesitter
automatically detect the approriate treesitter mode dependant on the language mode
#+begin_src emacs-lisp
  (use-package treesit-auto
    :config
    (global-treesit-auto-mode))
  (setq treesit-auto-install 'prompt)
#+end_src
* Applications
** vterm
a full complete shell for emacs
#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :bind ("M-RET" . vterm))
#+end_src
* Runtime Performance
Make gc pauses faster by decreasing the threshold
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src

* TODO
- org mode nice heading symbols
- look at my doom config
