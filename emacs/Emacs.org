#+TITLE: Emacs config
#+AUTHOR: Felix Dumbeck
#+STARTUP: fold
#+PROPERTY: header-args :emacs-lisp :tangle .config/emacs/init.el :results silent :mkdirp yes
#+auto_tangle: t

* preface
simple "performant" GNU Emacs 29.1+ [[https://leanpub.com/lit-config/read][literate config]] that uses as much built in stuff as possible and builds upon that where necessary
Works for me
* startup
** increase startup performance
*** increase garbage collection threshold
make garbage-collection less active by increasing its threshold during startup so Emacs starts up faster
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))      ;500mb
  (setq read-process-output-max (* 2 1024 1024)) ; 2mb
#+end_src
*** measure startup performance
in order to measure the time it takes for Emacs to startup use ~emacs-init-time~
see what packages are loaded at startup (*only have it enabled when debugging!*):
#+begin_src emacs-lisp :tangle no
  (setq debug-on-error t)
  (setq use-package-verbose t)
#+end_src
* package management
** enable melpa
Setup package repositories
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  (require 'use-package-ensure) ;; make all use-package :ensure t
  (setq use-package-always-ensure t)
#+end_src
** upgrade built in packages
#+begin_src emacs-lisp
  (setq package-install-upgrade-built-in t)
#+end_src
* keep .config/emacs clean
stop transient files from being created in the Emacs config folder
** change location of the custom file
prevent Emacs from adding custom settings to init.el and choose =custom.el= instead
#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (load custom-file 'noerror 'nomessage)
#+end_src
** auto generated files in tmp directory
*** keep backup files in a temporary directory
#+begin_src emacs-lisp
  (setq backup-dir (expand-file-name "tmp/backups/" user-emacs-directory))
  (setq backup-directory-alist `(("." . , backup-dir)))
  (setq delete-old-versions t)
#+end_src
*** keep  auto-save files in a temporary directory
#+begin_src emacs-lisp
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*", (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
#+end_src
* general
** user info
#+begin_src emacs-lisp
  (setq user-full-name "Felix Dumbeck"
        user-mail-address "felix@dumbeck.net")
#+end_src
** user interface
*** show scratch buffer on startup
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src
*** flash when the bell rings
to avoid Emacs making a sound on things like trying to scroll past the first line make it flash the screen instead
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src
*** disable UI dialogs as prompts
#+begin_src emacs-lisp
  (setq use-dialog-box nil)
#+end_src
*** remove GUI elements
remove the menu-bar tool-bar and scroll-bar as a measure to remove visual clutter
#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
#+end_src
*** lines
**** highlight current line
#+begin_src emacs-lisp
  (global-hl-line-mode t)
#+end_src
**** enable line wrapping
#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src
**** show relative line numbers
#+begin_src emacs-lisp
  ;; (global-display-line-numbers-mode t) ;; enable line numbers globally
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'text-mode-hook #'display-line-numbers-mode)
  (add-hook 'org-mode-hook #'display-line-numbers-mode)
  ;;(setq display-line-numbers-type 'relative) ;; make line numbers relative
#+end_src
*** prettify symbols
#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src
*** theme
**** cool themes (not used)
#+begin_src emacs-lisp :tangle no
  (use-package gruvbox-theme :defer)
  (use-package jazz-theme :defer)
  (use-package zenburn-theme)
  (use-package anti-zenburn-theme)
  (use-package hc-zenburn-theme)
  ;; (load-theme 'gruvbox-dark-hard t)
  ;; (load-theme 'gruvbox-light-soft t)
#+end_src
**** ef-themes
#+begin_src emacs-lisp
  (use-package ef-themes)
#+end_src
#+begin_src emacs-lisp :tangle no
  ;; (load-theme 'modus-operandi)
  ;; (load-theme 'ef-cherie t)
  ;; (load-theme 'ef-autumn t)
  ;; (load-theme 'ef-dark t)
  ;; (load-theme 'ef-rosa t)
  ;; (load-theme 'ef-spring t)
  ;; (load-theme 'ef-melissa-light t)
  ;; (load-theme 'ef-duo-light t)
  ;; (load-theme 'ef-duo-dark t)
  ;; (load-theme 'ef-night t)
  ;; (load-theme 'ef-bio t)
#+end_src
**** modus theme modifications
make modeline and frames boderless
for emacs 29:
#+begin_src emacs-lisp
  (setq modus-themes-mode-line '(borderless))
#+end_src
for emacs 30:
#+begin_src emacs-lisp
  (setq modus-themes-common-palette-overrides
        '((border-mode-line-active unspecified)
          (border-mode-line-inactive unspecified)))
#+end_src

#+begin_src emacs-lisp
  (setq modus-themes-fringes nil)
  (add-hook 'enable-theme-functions
            (lambda (&rest _) (set-face-foreground
                               'vertical-border (face-background 'default))))
#+end_src
**** auto pick theme
picks a light color-theme when the sun is risen and a dark theme when the sun is set
#+begin_src emacs-lisp
  (require 'ef-themes)
  (use-package circadian
    :if (display-graphic-p)
    :config
    (setq calendar-latitude 52.5)
    (setq calendar-longitude 13.4)
    (setq circadian-themes '(
                             ;; (:sunrise . modus-operandi-tinted) ;emacs 30
                             (:sunrise . modus-operandi)
                             ;; (:sunrise  . ef-day)
                             ;; (:sunset  . ef-night)
                             ;; (:sunset . ef-autumn)
  			   (:sunset . modus-vivendi)
                             ;; (:sunset . tango-dark)
                             ;; (:sunset . modus-vivendi)
                             ;; (:sunset . ef-owl)
                             ;; (:sunrise . tsdh-light)
                             ;; (:sunset . gruber-darker)
                             ;; (:sunrise . tango)
                             ;; (:sunset . deeper-blue)
                             ;; (:sunset . wheatgrass)
                             ;; (:sunset . manoj-dark)
                             ))
    (circadian-setup))
#+end_src
*** fonts
**** general font
#+begin_src emacs-lisp
  (set-frame-font "Comic Shanns Mono 14" nil t)
  ;; (set-frame-font "Serious Shanns NerdFont 14" nil t)
  ;; (set-frame-font "Fantasque Sans Mono 12" nil t)
  (add-to-list 'default-frame-alist '(font . "Comic Shanns Mono 14"))
#+end_src
**** icon font
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src
*** cursor style
#+begin_src emacs-lisp
  (setq-default cursor-type 'bar)
#+end_src
** mode-line
show the mode status line from doom Emacs at the bottom to provide more information while looking nicer
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode t)
    :config
    (display-battery-mode)
    (setq display-time-24hr-format t)
    (display-time))
#+end_src
make it so mode line can be hidden by calling =hide-mode-line=
#+begin_src emacs-lisp :tangle no
  (use-package hide-mode-line
    :defer t
    :commands (hide-mode-line-mode))
#+end_src
** which-key
which-key is great for getting an overview of what keybindings are available based on the prefix keys you entered.
it shows a table of all possible ways you can finish a shortcut after having started one
#+begin_src emacs-lisp
  (use-package which-key
    ;; :ensure nil				;included in emacs 30+
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src
** various
*** join-lines with =C-x C-j=
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-j") 'join-line)
#+end_src
*** move to trash instead of deleting
the default trash dir is the xdg freedesktop location
#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash t)
#+end_src
*** move current file to trash C-x x x x
#+begin_src emacs-lisp
  (defun move-current-file-to-trash ()
    (interactive)
    (when (eq major-mode 'dired-mode)
      (user-error "%s: In dired. Nothing is done." real-this-command))
    (move-file-to-trash buffer-file-name))
  (global-set-key (kbd "C-x x x") 'move-current-file-to-trash)
#+end_src
*** open switch-to-buffer with =C-x C-b=
=C-x C-b= same as =C-x b= because that's what i always want
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'switch-to-buffer)
#+end_src
*** show recently opened files first in minibuffers
#+begin_src emacs-lisp
  (recentf-mode t)
#+end_src
*** save last location in file
#+begin_src emacs-lisp
  (save-place-mode t)
#+end_src
*** always delete directories recursivly without asking
#+begin_src emacs-lisp
  (setq dired-recursive-deletes 'always)
#+end_src
*** replace selection
typed text replaces the selection if the selection is active, pressing delete or backspace deletes the selection
#+begin_src emacs-lisp
  (delete-selection-mode)
#+end_src
*** revert (update) buffers when the underlying file has changed
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
  ;; revert dired and other buffers
  (setq global-auto-revert-non-file-buffers t)
#+end_src
*** dont overwrite system clipboard
save system clipboard before yanking
#+begin_src emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+end_src
*** yank (paste) when pressing C-z
because it is very confusing when switching between qwerty and qwertz and the window gets minimized
#+begin_src emacs-lisp
  (global-set-key (kbd "C-z") 'yank)
#+end_src
*** kill buffer and close window
kill the current buffer and close its window/frame with =C-x C-k=
#+begin_src emacs-lisp
  (defun kill-buffer-and-close-window ()
    "Kill the current buffer and close its window."
    (interactive)
    (kill-buffer)
    (delete-window))
  (global-set-key (kbd "C-x C-k") 'kill-buffer-and-close-window)
#+end_src
*** registers
**** append-to-register keybinding
useful when having multiple cursors, wanting to copy from all and pasting all contents at the location of only a single cursor
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x r a") 'append-to-register)
#+end_src
**** empty-register
#+begin_src emacs-lisp
  (defun empty-register (register)
    "Clears out value from Emacs register."
    (interactive "cRegister: ")
    (set-register register nil))

  (global-set-key (kbd "C-x r e") 'empty-register)
#+end_src
*** convert region from and to hexadecimal
#+begin_src emacs-lisp
  (defun convert-region-decimal-to-hexadecimal (start end)
    "Convert a region from decimal to hexadecimal."
    (interactive "r")
    (save-excursion
      (goto-char start)
      (while (< (point) end)
        (let ((num (thing-at-point 'word)))
          (when (string-match-p "^[0-9]+$" num)
            (delete-region (point) (+ (point) (length num)))
            (insert (format "0x%x" (string-to-number num)))))
        (forward-word))))
#+end_src
#+begin_src emacs-lisp
  (defun convert-region-hexadecimal-to-decimal (start end)
    "Convert a region from hexadecimal to decimal."
    (interactive "r")
    (save-excursion
      (goto-char start)
      (while (< (point) end)
        (let ((num (thing-at-point 'word)))
          (when (string-match-p "^0x[0-9a-fA-F]+$" num)
            (delete-region (point) (+ (point) (length num)))
            (insert (format "%d" (string-to-number (substring num 2) 16)))))
        (forward-word))))
#+end_src
#+begin_src emacs-lisp :tangle no
  (global-set-key (kbd "C-c h") 'convert-region-decimal-to-hexadecimal)
  (global-set-key (kbd "C-c d") 'convert-region-hexadecimal-to-decimal)
#+end_src
* completion system
** minibuffer completion
*** vertico: performant and minimalist vertical completion UI based on the default completion system for minibuffers
**** buffer auto-completion with vertico
#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-scroll-margin 0) ;; Different scroll margin
    (vertico-count 10) ;; Show more candidatesm
    ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    :init
    (vertico-mode))
#+end_src
**** useful general emacs config
TODO: look into necessity
#+begin_src emacs-lisp
  ;; A few more useful configurations...
  (use-package emacs
    :ensure nil
    :custom
    (enable-recursive-minibuffers t)	;Support opening new minibuffers from inside existing minibuffers.
    ;; Emacs 28 and newer: Hide commands in M-x which do not work in the current
    ;; mode.  Vertico commands are hidden in normal buffers. This setting is
    ;; useful beyond Vertico.
    (read-extended-command-predicate #'command-completion-default-include-p)
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))
#+end_src
**** candidate meta information with marginalia
show meta information about vertico completion options (eg. file size, last edited)
#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :init
    (marginalia-mode))
#+end_src
**** vertico show candidate icons
icons for completion options
#+begin_src emacs-lisp :tangle no
  (use-package all-the-icons-completion
    :after (all-the-icons marginalia)
    :init (all-the-icons-completion-mode)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))
#+end_src
**** set command history length
#+begin_src emacs-lisp
  (setq history-length 50)
  (savehist-mode t)
#+end_src
Persist history over Emacs restarts. Vertico sorts by history position.
#+begin_src emacs-lisp :tangle no
  (use-package savehist
    :init
    (savehist-mode))
#+end_src
*** consult: for seeing "occurrence-previews" when searching
#+begin_src emacs-lisp
  (use-package consult
    :bind (("C-c r" . consult-ripgrep)
           ("C-s" . consult-line))
    :config
    (keymap-set minibuffer-local-map "C-r" 'consult-history)
    (setq completion-in-region-function #'consult-completion-in-region))
#+end_src
** normal buffer completion
*** corfu: in-buffer completion UI on top of the built-in completion framework
**** main config
#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    (corfu-auto-prefix 2) ;; show completions after two letters
    (corfu-auto-delay 0) ;; show completions immediatly
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin
    :init
    (global-corfu-mode)
    (corfu-history-mode))
#+end_src
**** corfu-popupinfo-mode
show documentation and optionally source code in pop up buffer next to auto-completion
"M-n" #'corfu-doc-scroll-up
"M-p" #'corfu-doc-scroll-down)
#+begin_src emacs-lisp :tangle no
  (use-package corfu-info
    :after corfu
    :ensure nil
    :hook (corfu-mode . corfu-info-mode))
#+end_src
#+begin_src emacs-lisp
  (use-package corfu-popupinfo
    :after corfu
    :ensure nil
    :hook (corfu-mode . corfu-popupinfo-mode)
    :custom
    (corfu-popupinfo-delay '(0.6 . 0.4))
    (corfu-popupinfo-hide nil)
    :config
    (corfu-popupinfo-mode))
#+end_src
**** corfu-terminal
#+begin_src emacs-lisp
  (use-package corfu-terminal
    :if (not (display-graphic-p))
    :init
    (corfu-terminal-mode t))
#+end_src
**** nerd-icons-corfu
add nerd-font icons to corfu completion candidates
#+begin_src emacs-lisp
  (use-package nerd-icons-corfu
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src
**** enable auto-completions in eshell
#+begin_src emacs-lisp
  (add-hook 'eshell-mode-hook
            (lambda ()
              (setq-local corfu-auto nil)
              (corfu-mode)))
#+end_src
**** look into:
+ [[https://code.bsdgeek.org/adam/corfu-candidate-overlay][adam/corfu-candidate-overlay: Show first Corfu's completion candidate in an o...]]
*** cape: extend the built in completion at point functionality
#+begin_src emacs-lisp
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-elisp-symbol)
           ("C-c p e" . cape-elisp-block)
           ("C-c p a" . cape-abbrev)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p :" . cape-emoji);;; might be deleted
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-to-list 'completion-at-point-functions #'cape-abbrev) ;Complete abbreviation (add-global-abbrev, add-mode-abbrev).
    (add-to-list 'completion-at-point-functions #'cape-dabbrev) ;Complete word from current buffers. See also dabbrev-capf on Emacs 29
    (add-to-list 'completion-at-point-functions #'cape-file)    ;Complete file name.
    (add-to-list 'completion-at-point-functions #'cape-elisp-block) ;Complete Elisp in Org or Markdown code block.
    (add-to-list 'completion-at-point-functions #'cape-history)	  ;Complete from Eshell, Comint or minibuffer history.
    (add-to-list 'completion-at-point-functions #'cape-keyword)	  ;Complete programming language keyword.
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    (add-to-list 'completion-at-point-functions #'cape-dict) ;Complete word from dictionary file.
    ;; (add-to-list 'completion-at-point-functions #'cape-emoji)
    ;; (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )
#+end_src
** improve candidate filtering with orderless
improve vertico and corfu completions by allowing matches to search terms differently ordered
#+begin_src emacs-lisp
  (use-package orderless
    :config
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** other completion stuff
*** bash-completion
#+begin_src emacs-lisp
  (use-package bash-completion)
#+end_src
* org-mode
** defer startup
for an improved Emacs startup time loading =org= is deferred until it is actually needed
#+begin_src emacs-lisp
  (use-package org
    :ensure nil				;load built in org-mode
    :commands (org-mode))
#+end_src
** functionality
*** suggest headings when inserting link
when inserting a new link to a heading in the current document, an auto completion minibuffer will pop up, suggesting all headings in the current document. From: [[https://howardism.org/Technical/Emacs/tiddly-wiki-in-org.html][TiddlyWiki In Org]]
#+begin_src emacs-lisp
  (defun unpropertize (string)
    "Removes all text properties from STRING."
    (set-text-properties 0 (length string) nil string) string)
  (defun org-get-headings ()
    "Return a list of an org document's headings."
    (org-map-entries (lambda () (unpropertize (org-get-heading t t t t)))))
  (defun org-insert-link-headline (header)
    "Insert internal link to HEADER entry in current file."
    (interactive (list (completing-read "Link: " (org-get-headings) nil nil)))
    (org-insert-link nil header))
  ;; (define-key org-mode-map (kbd "C-c h") 'org-insert-link-headline)
#+end_src
*** when exporting org mode to latex, keep the comments
#+begin_src emacs-lisp
  (defun transform-comments (backend)
    (while (re-search-forward "[:blank:]*# " nil t)
      (replace-match "#+LATEX: % ")))
  (add-hook 'org-export-before-parsing-hook #'transform-comments)
#+end_src
*** org-contrib
add contrib package for extra features
#+begin_src emacs-lisp :tangle no
  (use-package org-contrib
    :after org-mode)
#+end_src
*** start up folded
#+begin_src emacs-lisp
  (setq org-startup-folded t)
#+end_src
*** org-cliplink
give pasted links the title provided by the meta-information of the website
#+begin_src emacs-lisp
  (use-package org-cliplink
    :bind ("C-x p i" . org-cliplink))
#+end_src
*** ox-hugo
export org-mode files to HTML pages using hugo
#+begin_src emacs-lisp
  (use-package ox-hugo
    :after org-mode
    :commands org-hugo-auto-export-mode)
#+end_src
*** drag-and-drop
enable drag-and-drop support for images and files; inserts inline previews for images and an icon+link for other media types.
#+begin_src emacs-lisp :tangle no
  (use-package org-download
    :hook ((org-mode . org-download-mode)
           (dired-mode . org-download-enable)))
#+end_src
** navigation
*** replace S-M-arrow-key with S-M-{n,p,b,f}
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "M-F") 'org-shiftmetaright)))
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "M-B") 'org-shiftmetaleft)))
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "M-P") 'org-move-subtree-up)))
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "M-N") 'org-move-subtree-down)))
#+end_src
** improve looks
*** general
#+begin_src emacs-lisp
  (setq org-startup-indented t
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-image-actual-width '(300))
#+end_src
*** show hidden emphasis markers
show style emphasis markers such as the * in =*bold*= when hovering over the word
#+begin_src emacs-lisp
  (use-package org-appear
    :hook (org-mode . org-appear-mode))
#+end_src
*** fonts and bullets
**** org-superstar (disabled)
make bullet points and headings look nicer
#+begin_src emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode))
#+end_src
**** increase heading and title size 
#+begin_src emacs-lisp
  (custom-set-faces
   '(org-level-1 ((t (:height 1.75))))
   '(org-level-2 ((t (:height 1.5))))
   '(org-level-3 ((t (:height 1.25))))
   '(org-level-4 ((t (:height 1.1))))
   '(org-document-title ((t (:height 1.5)))))
#+end_src
** org-babel
*** block templates
these templates enable you to type things like =<el= and then hit Tab to expand the template.
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("ba" . "src bash"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  (add-to-list 'org-structure-template-alist '("tex" . "src latex"))
  (add-to-list 'org-structure-template-alist '("rs" . "src rust"))
#+end_src
*** execute source code blocks without confirmation
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src
*** org-auto-tangle
when ~#+auto_tangle: t~ is set in the beginning of an org-file, tangle all code blocks that are set to tangle when saving
#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src
*** languages
**** built-in
#+begin_src emacs-lisp
  (setq org-babel-python-command "python3")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
#+end_src
**** rust
#+begin_src emacs-lisp :tangle no
  (use-package ob-rust
    :after org-mode)
#+end_src
**** shells (sh, bash, zsh, fish, etc.)
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)))
#+end_src
** org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/Notes"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode))
#+end_src
** org agenda
*** set a shortcut to open the agenda view
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c a") #'org-agenda)
#+end_src
*** time window
make it so the agenda always starts today and we can see two weeks from today instead of just until Sunday
#+begin_src emacs-lisp
  (setq org-agenda-start-day "0d")
  (setq org-agenda-span 20)
  (setq org-agenda-start-on-weekday nil)
#+end_src
*** set org-agenda files
the files that org-agenda will visit to search for timestamps to use when creating the agenda
#+begin_src emacs-lisp
  (setq org-agenda-files
        '("~/uni/notes/uni.org"
          "~/uni/notes/personal.org"))
#+end_src
* editing configuration
** folding
set shortcuts for fold (collapse and expand) regions of text/code-blocks
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'hs-minor-mode)
  (global-set-key (kbd "C-c C-h") 'hs-hide-block)
  (global-set-key (kbd "C-c C-s") 'hs-show-block)
  (global-set-key (kbd "C-c C-t") 'hs-toggle-hiding)
  (global-set-key (kbd "C-<tab>") 'hs-toggle-hiding)
  (global-set-key (kbd "C-c C-a") 'hs-show-all)
  (global-set-key (kbd "C-c C-l") 'hs-hide-all)
#+end_src
** kill line backwards
position of the pointer to the beginning of the line with =C-S-k=
#+begin_src emacs-lisp
  (defun kill-line-backward ()
    "Kill line backwards from the position of the pointer to the beginning of the line."
    (interactive)
    (kill-line 0))
  (global-set-key (kbd "C-S-k") 'kill-line-backward)
#+end_src
** multiple cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("C-;" . mc/edit-lines)
           ("C-S-c C-S-c" . mc/edit-lines)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this))
    :init
    (setq  mc/match-cursor-style nil))
#+end_src
** spellcheck
jinx spellchecking, requires (lib-)enchant using hunspell dictionaries
#+begin_src emacs-lisp
  ;; use on normal systems
  (use-package jinx
    :if (not (file-directory-p "~/.guix-profile/share/emacs/site-lisp")) ;only install on non guix system
    :hook (emacs-startup . global-jinx-mode)
    :bind (("M-$" . jinx-correct)
           ("C-M-$" . jinx-languages)))

  ;; use emacs-jinx package from guix if available
  (use-package jinx
    :if (file-directory-p "~/.guix-profile/share/emacs/site-lisp") ;only install on guix system
    :ensure nil
    :load-path "~/.guix-profile/share/emacs/site-lisp/jinx-1.9/"
    :hook (emacs-startup . global-jinx-mode)
    :bind (("M-$" . jinx-correct)
           ("C-M-$" . jinx-languages)))

  ;; (add-hook 'emacs-startup-hook #'global-jinx-mode)
  ;; (keymap-global-set "M-$" #'jinx-correct)
  ;; (keymap-global-set "C-M-$" #'jinx-languages)
  ;; (keymap-global-set "M-p" #'jinx-previous)
  ;; (keymap-global-set "M-n" #'jinx-next)
#+end_src
** highlight TODO
highlight TODO FIXME etc.
#+begin_src emacs-lisp
  (use-package hl-todo
    :hook ((prog-mode . hl-todo-mode)
           (org-mode . hl-todo-mode))
    :config
    ;; (keymap-set hl-todo-mode-map "C-c p" #'hl-todo-previous)
    ;; (keymap-set hl-todo-mode-map "C-c n" #'hl-todo-next)
    ;; (keymap-set hl-todo-mode-map "C-c o" #'hl-todo-occur)
    ;; (keymap-set hl-todo-mode-map "C-c i" #'hl-todo-insert)
    (setq hl-todo-keyword-faces
          '(("TODO"   . "#FF0000")
            ("FIXME"  . "#FF0000")
            ("DEBUG"  . "#A020F0")
            ("GOTCHA" . "#FF4500")
            ("STUB"   . "#1E90FF"))))
#+end_src
** rainbow delimiters
match brackets and other delimiters by color to see the current scope more easily
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** auto close brackets FIXME 
*** smartparens
#+begin_src emacs-lisp
  (use-package smartparens-mode
    :ensure smartparens
    :hook (prog-mode text-mode markdown-mode)
    :config
    (require 'smartparens-config))
#+end_src
*** auto close brackets
automatically add closing brackets, via electric-mode
#+begin_src emacs-lisp :tangle no
  (electric-pair-mode t)
#+end_src
*** auto indent
auto indent
#+begin_src emacs-lisp
  (electric-indent-mode t)
  ;; (electric-quote-mode t)
  (setq minibuffer-default-prompt-format " [%s]") ; Emacs 29
  (minibuffer-electric-default-mode 1)
#+end_src
* development
** git
*** magit
TODO: add checkout shortcut
#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit)
           ("C-x c" . magit-clone-shallow)))
#+end_src
**** keychain-evnvironment
to prevent being asked to type the ssh/gpg-key password on every action, make sure magit knows the ssh-key-agents location via =keychain-evnvironment=:
#+begin_src emacs-lisp :tangle no
  (use-package keychain-environment
    :hook ((magit . keychain-environment)))
#+end_src
**** magit-todo
Show source files' TODOs (and FIXMEs, etc) in Magit status buffer
#+begin_src emacs-lisp
  (use-package magit-todos
    :after magit
    :config (magit-todos-mode 1))
#+end_src
*** forge
Forge allows you to work with Git forges, currently Github and Gitlab, from the comfort of Magit and Emacs.
#+begin_src emacs-lisp :tangle no
  (use-package forge
    :after magit)
#+end_src
*** diff-hl
highlight uncommitted, changed lines on the side of a buffer
#+begin_src emacs-lisp
  (use-package diff-hl
    :hook ((text-mode . diff-hl-mode)
           (org-mode . diff-hl-mode)
           (prog-mode . diff-hl-mode)
           ;; (dired-mode . diff-hl-dired-mode)
           ))
#+end_src
** tree-sitter
automatically detect the appropriate tree-sitter mode dependent on the language mode and file type
#+begin_src emacs-lisp
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src
** languages
*** markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("\\.md\\'" . markdown-mode)
    :config (setq markdown-command "multimarkdown"))
#+end_src
*** shell (disabled)
enable shellcheck using flymake for checking correctness and scanning common mistakes in shell-code
#+begin_src emacs-lisp :tangle no
  (use-package flymake-shellcheck
    :hook (bash-ts-mode . flymake-shellcheck-mode))
#+end_src
*** rust-ts-mode get info regarding indentation from rustfmt.toml
#+begin_src emacs-lisp
  (use-package toml)
  (require 'toml)

  (defun my-rust-ts--apply-rustfmt-config (rustfmt-data)
    "Apply settings from RUSTFMT-DATA to the current buffer.
  RUSTFMT-DATA is an alist parsed from rustfmt.toml."
    (let ((hard-tabs (alist-get "hard_tabs" rustfmt-data nil nil #'equal))
          (tab-spaces (alist-get "tab_spaces" rustfmt-data nil nil #'equal)))
      (message "rustfmt config: hard_tabs: %s; tab_spaces: %s" hard-tabs tab-spaces)
      (when (eq hard-tabs t)
        (setq-local indent-tabs-mode t))
      (if tab-spaces
  	(setq-local tab-width tab-spaces)
        (setq-local tab-width 4))))

  (defun my-rust-ts--find-and-apply-rustfmt-config ()
    "Look for a rustfmt.toml file in the current project tree and apply its settings."
    (let ((root (locate-dominating-file default-directory "rustfmt.toml")))
      (when root
        (let ((rustfmt-file (expand-file-name "rustfmt.toml" root)))
          (when (file-exists-p rustfmt-file)
  	  (message "using rustfmt.toml file: %s" (rustfmt-file))
            (condition-case err
                (let ((data (toml:read-from-file rustfmt-file)))
  		(message "data: %s" data)
                  (my-rust-ts--apply-rustfmt-config data))
              (error (message "Error parsing rustfmt.toml: %s" err))))))))

  (add-hook 'rust-ts-mode-hook #'my-rust-ts--find-and-apply-rustfmt-config)
#+end_src
#+begin_src emacs-lisp :tangle no
  (defun my-rust-ts-mode-tab-setup ()
    "Configure `rust-ts-mode' to use tabs for indentation."
    (setq indent-tabs-mode t)
    (setq tab-width 4))

  (add-hook 'rust-ts-mode-hook #'my-rust-ts-mode-tab-setup)
#+end_src
*** rust-mode (not used)
#+begin_src emacs-lisp :tangle no
  (defvar rust-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "C-c C-d") #'rust-dbg-wrap-or-unwrap)
      (when rust-load-optional-libraries
        (define-key map (kbd "C-c C-c C-u") 'rust-compile)
        (define-key map (kbd "C-c C-c C-k") 'rust-check)
        (define-key map (kbd "C-c C-c C-t") 'rust-test)
        (define-key map (kbd "C-c C-c C-r") 'rust-run)
        (define-key map (kbd "C-c C-c C-l") 'rust-run-clippy)
        (define-key map (kbd "C-c C-f") 'rust-format-buffer)
        (define-key map (kbd "C-c C-n") 'rust-goto-format-problem))
      map)
    "Keymap for Rust major mode.")
#+end_src
*** ruby
#+begin_src emacs-lisp :tangle no
  (use-package erblint
    :hook (ruby-ts-mode . erblint-mode))
#+end_src
*** elm
#+begin_src emacs-lisp :tangle no
  (use-package elm-mode
    :defer t
    :mode ("\\.elm\\'". elm-mode)
    :config
    (setq elm-mode-hook '(elm-indent-simple-mode))
    (add-hook 'elm-mode-hook 'elm-format-on-save-mode))
#+end_src
*** php
#+begin_src emacs-lisp
  (use-package php-mode)
#+end_src
*** webmode
#+begin_src emacs-lisp
  (use-package web-mode
    :defer t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode)))
#+end_src
*** makefile
auto enable makefile-mode for Makefiles
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\Makefile\\'" . makefile-mode))
#+end_src
*** c-ts-mode: use linux coding style
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.c\\'" . c-ts-mode))
  (add-hook 'c-ts-mode-hook (lambda () (c-ts-mode-set-global-style 'linux)
                              (when (eq c-ts-mode-indent-style 'linux)
                                (setq c-ts-mode-indent-offset 8)
                                (setq comment-style 'extra-line))))
#+end_src
** flymake
finding syntax errors on the fly, also works with eglot and spellcheck (it also might be worth checking out [[https://www.flycheck.org] [Flycheck]])
#+begin_src emacs-lisp
  ;; (define-key flymake-mode-map (kbd "M-n") 'flymake-goto-next-error)
  ;; (define-key flymake-mode-map (kbd "M-p") 'flymake-goto-prev-error)
  (global-set-key (kbd "M-n") 'flymake-goto-next-error)
  (global-set-key (kbd "M-p") 'flymake-goto-prev-error)
#+end_src
** eglot
add keybindings for when in eglot-mode (Emacs' built in language-server)
#+begin_src emacs-lisp
  (require 'eglot)
  (setq eglot-events-buffer-size 0) ;disable logging and improve perfomance
  (define-key eglot-mode-map (kbd "C-c c r") 'eglot-rename)
  (define-key eglot-mode-map (kbd "C-c c o") 'eglot-code-action-organize-imports)
  (define-key eglot-mode-map (kbd "C-c c h") 'eldoc)
  (define-key eglot-mode-map (kbd "C-c c a") 'eglot-code-actions)
  (define-key eglot-mode-map (kbd "C-c c f") 'eglot-format-buffer)
  (define-key eglot-mode-map (kbd "C-c c q") 'eglot-code-action-quickfix)
  (define-key eglot-mode-map (kbd "C-c c e") 'eglot-code-action-extract)
  (define-key eglot-mode-map (kbd "<f6>") 'xref-find-definitions)
  (define-key eglot-mode-map (kbd "M-.") 'xref-find-definitions)
#+end_src
** compile-mode
scroll to bottom in compile mode output buffer
#+begin_src emacs-lisp
  (setq compilation-scroll-output 'first-error)
#+end_src
** which-function-mode
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'which-function-mode)
#+end_src
** debugging
#+begin_src emacs-lisp :tangle no
  (use-package dape)
  ;; (setq dap-auto-configure-features '(sessions locals controls tooltip))
#+end_src
* applications
** restclient
manually explore and test HTTP REST webservices
#+begin_src emacs-lisp
  (use-package restclient
    :defer t)
#+end_src
** dired
*** show file icons
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
*** show sizes of all files in human readable format
#+begin_src emacs-lisp
  (setq dired-listing-switches "-alh")
#+end_src
*** show sizes of folders
#+begin_src emacs-lisp
  (use-package dired-du
    :after dired
    :config (setq dired-du-size-format t))
#+end_src
*** automatically update dired buffers on revisiting their directory
#+begin_src emacs-lisp
  (setq dired-auto-revert-buffer t)
#+end_src
*** extract tar.gz contents in subfolder instead of the current dir
#+begin_src emacs-lisp
  (setq dired-guess-shell-alist-user
        '(("\\.tar\\.gz\\'"
           "b=$(basename ? .tar.gz); mkdir -p \"$b\"; tar xzf ? -C \"$b\"")
          ("\\.tar\\.bz2\\'"
           "b=$(basename ? .tar.bz2); mkdir -p \"$b\"; tar xjf ? -C \"$b\"")
          ("\\.tar\\.xz\\'"
           "b=$(basename ? .tar.xz); mkdir -p \"$b\"; tar xJf ? -C \"$b\"")
          ("\\.tar\\'"
           "b=$(basename ? .tar); mkdir -p \"$b\"; tar xf ? -C \"$b\"")
          ("\\.zip\\'"
           "b=$(basename ? .zip); mkdir -p \"$b\"; unzip ? -d \"$b\"")
  	("\\.rar\\'"
  	 "b=$(basename ? .rar); mkdir -p \"$b\"; unrar ? \"$b\"")))
#+end_src
*** make dired guess the target directory when copying
#+begin_src emacs-lisp
  (setq dired-dwim-target t)
#+end_src
** elf-feed
subscribe to rss-feeds
#+begin_src emacs-lisp
  (use-package elfeed
    :bind ("C-x w" . elfeed)
    :config
    (setq elfeed-feeds
          '("http://nullprogram.com/feed/"
            "https://mccd.space/feed.xml"
            "https://dthompson.us/feed.xml"
            "https://planet.emacslife.com/atom.xml"
            "https://news.opensuse.org/feed.xml"
            "https://irreal.org/blog/?feed=rss2"
            "https://protesilaos.com/keeb.xml"
            "https://protesilaos.com/codelog.xml"
            "https://protesilaos.com/news.xml"
            "https://drewdevault.com/blog/index.xml"
  	  "https://lorendb.dev/index.xml"
  	  "https://0pointer.net/blog/index.rss20"
            ;; "https://archlinux.org/feeds/news/"
            "https://blogs.kde.org/index.xml")))
#+end_src
** nov.el
read ebooks in ebpub format
#+begin_src emacs-lisp
  (use-package nov
    :mode ("\\.epub\\'" . nov-mode))
  ;; (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  ;; :commands nov)
#+end_src
** vterm
complete terminal in Emacs
#+begin_src emacs-lisp :tangle no
  (use-package vterm
    :defer t
    :commands vterm)
#+end_src
** eshell
set M-RET shortcut for opening eshell
#+begin_src emacs-lisp
  (global-set-key (kbd "M-RET") 'eshell)
#+end_src
** pdf-tools
better interaction with pdf
#+begin_src emacs-lisp
  (use-package pdf-tools
    :if (not (file-directory-p "~/.guix-profile/share/emacs/site-lisp")) ;only install on non guix system
    :mode ("\\.pdf\\'" . pdf-view-mode))
  (use-package pdf-tools
    :if (file-directory-p "~/.guix-profile/share/emacs/site-lisp") ;only install on guix system
    :ensure nil
    :load-path "~/.guix-profile/share/emacs/site-lisp/pdf-tools-1.1.0"
    :mode ("\\.pdf\\'" . pdf-view-mode))
#+end_src
** emacs-everywhere (not working)
use ~emacsclient --eval "(emacs-everywhere)"~ from another window when writing text to open this text in an Emacs buffer. Type =C-c C-c= to reinsert the edited text into the text field.
*Warning!* this does currently not work under Wayland
#+begin_src emacs-lisp :tangle no
  (use-package emacs-everywhere)
#+end_src
** ollama
#+begin_src emacs-lisp
  (use-package ellama
    :bind ("C-c e" . ellama-transient-main-menu)
    :init
    (setopt ellama-chat-display-action-function #'display-buffer-full-frame)
    (setopt ellama-instant-display-action-function #'display-buffer-at-bottom)
    :config
    ;; send last message in chat buffer with C-c C-c
    (add-hook 'org-ctrl-c-ctrl-c-hook #'ellama-chat-send-last-message))
#+end_src
** casual
#+begin_src emacs-lisp
  (use-package casual)
#+end_src
*** casual-calc
#+begin_src emacs-lisp
  (require 'casual-calc)
  (keymap-set calc-mode-map "C-o" #'casual-calc-tmenu)
  (keymap-set calc-alg-map "C-o" #'casual-calc-tmenu)
#+end_src
*** casual-image
#+begin_src emacs-lisp
  (require 'casual-image)
  (keymap-set image-mode-map "C-o" #'casual-image-tmenu)
#+end_src
** email
*** filtering with notmuch
#+begin_src emacs-lisp
  (use-package notmuch
    :commands notmuch
    :bind (:map global-map ("C-c m" . notmuch)
                :map notmuch-hello-mode-map ("G" . mbsync)
                :map notmuch-search-mode-map ("G" . mbsync)))
#+end_src
*** syncing with mbsync
#+begin_src emacs-lisp
  (use-package mbsync
    :commands mbsync
    :config
    (add-hook 'mbsync-exit-hook 'notmuch-poll-and-refresh-this-buffer))
#+end_src
* runtime performance
make garbage-collection pauses faster by decreasing the threshold, increasing the runtime performance
#+begin_src emacs-lisp :tangle no
  (setq gc-cons-threshold (* 10 1000 1000)) ;10mb
#+end_src
* TODO
+ look into [[https://protesilaos.com/codelog/2024-11-28-basic-emacs-configuration/][Emacs: a basic and capable configuration | Protesilaos Stavrou]]
+ use tabs for indentation and make them "sticky"???
+ email
  + gnus
  + rmail
  + mu4e: [[https://www.youtube.com/watch?v=yZRyEhi4y44&pp=ygULZW1hY3MgZW1haWw%3D][Streamline Your E-mail Management with mu4e - Emacs Mail - YouTube]]
+ handle passwords: [[https://www.youtube.com/watch?v=nZ_T7Q49B8Y][How to Encrypt Your Passwords with Emacs - YouTube]]
  [[https://github.com/daviwil/dotfiles/blob/master/.emacs.d/modules/dw-auth.el][dotfiles/.emacs.d/modules/dw-auth.el at master · daviwil/dotfiles · GitHub]]
+ inline git blame
* look into
+ [[https://www.youtube.com/watch?v=PMWwM8QJAtU][Emacs From Scratch #10 - Effortless File Management with Dired - YouTube]]
+ https://git.sr.ht/~technomancy/better-defaults/
+ look into new .el files in this directory
+ irc: [[https://www.youtube.com/watch?v=qWHTZIYTA4s&list=PLEoMzSkcN8oMMcPnYlNbQkUInjUxB75wE&pp=iAQB][Chat Like the 90's in Emacs with ERC - YouTube]]
+ [[https://github.com/Wilfred/deadgrep?tab=readme-ov-file][GitHub - Wilfred/deadgrep: fast, friendly searching with ripgrep and Emacs]]
+ wdired [[https://xenodium.com/emacs-git-rename-courtesy-of-dired/][Emacs: git rename, courtesy of dired]]
+ [[https://www.emacswiki.org/emacs/HippieExpand][EmacsWiki: Hippie Expand]]
+ [[https://github.com/emacs-sideline/sideline][GitHub - emacs-sideline/sideline: Show information on the side]]
+ for eshell [[https://github.com/xenodium/dotsies][GitHub - xenodium/dotsies: Dot files, Emacs config, etc]]
+ [[https://github.com/bbatsov/crux][GitHub - bbatsov/crux: A Collection of Ridiculously Useful eXtensions for Emacs]]
+ [[https://github.com/emacs-eaf/emacs-application-framework/?tab=readme-ov-file][GitHub - emacs-eaf/emacs-application-framework: EAF, an extensible framework ...]]
+ [[https://github.com/d12frosted/flyspell-correct][GitHub - d12frosted/flyspell-correct: Distraction-free words correction with ...]]
+ look at my doom config
+ [[https://github.com/tmalsburg/helm-bibtex][GitHub - tmalsburg/helm-bibtex: Search and manage bibliographies in Emacs]]
  [[https://orgmode.org/manual/Citations.html][Citations (The Org Manual)]]
+ [[https://github.com/Fuco1/smartparens][GitHub - Fuco1/smartparens: Minor mode for Emacs that deals with parens pairs...]]
+ avy [[https://github.com/abo-abo/avy][GitHub - abo-abo/avy: Jump to things in Emacs tree-style]]
+ embark [[https://protesilaos.com/codelog/2024-02-17-emacs-modern-minibuffer-packages/][Emacs: modern minibuffer packages (Vertico, Consult, etc.) | Protesilaos Stavrou]]
+ wgrep [[https://protesilaos.com/codelog/2024-02-17-emacs-modern-minibuffer-packages/][Emacs: modern minibuffer packages (Vertico, Consult, etc.) | Protesilaos Stavrou]]
+ org-present
+ interact with system trash [[https://github.com/shingo256/trashed][GitHub - shingo256/trashed: Viewing/editing system trash can in Emacs]]
+ xref navigation integration with consult [[https://github.com/brett-lempereur/consult-xref-stack][GitHub - brett-lempereur/consult-xref-stack: Navigate the Xref stack with Con...]]
+ treemacs
+ [[https://github.com/jdtsmith/speedrect][GitHub - jdtsmith/speedrect: Quick key bindings and other tools for rectangle...]]
+ denote instead of org-roam
+ ibuffer
+ deft
+ useful but not needed
  ruby
  [[https://github.com/pezra/rspec-mode][GitHub - pezra/rspec-mode: An RSpec minor mode for Emacs]]
+ editorconfig
+ look into: [[https://github.com/SystemCrafters/crafted-emacs][GitHub - SystemCrafters/crafted-emacs: A sensible base Emacs configuration.]]
+ instead of auto-ts-mode [[https://github.com/emacs-tree-sitter/tree-sitter-langs][GitHub - emacs-tree-sitter/tree-sitter-langs: Language bundle for Emacs's tre...]]
+ [[https://github.com/LionyxML/auto-dark-emacs][GitHub - LionyxML/auto-dark-emacs: Auto-Dark-Emacs is an auto changer between...]]
+ gcmh: dynamic garbage collection for improving speed
+ Combobulate: https://github.com/mickeynp/combobulate uses Tree-Sitter to provide a structured movement within your code [[https://www.masteringemacs.org/article/combobulate-structured-movement-editing-treesitter][Combobulate: Structured Movement and Editing with Tree-Sitter]]
+ crafted org config: [[file:~/crafted-emacs/docs/crafted-org.org]]
+ [[https://github.com/mclear-tools/tabspaces][GitHub - mclear-tools/tabspaces]]
+ [[https://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and/][A Complete Guide to Email in Emacs using Mu and Mu4e]]
[[https://arialdomartini.github.io/emacs-zoom][+ Emacs: let's zoom]]
+ https://www.reddit.com/r/emacs/comments/1h1d5k4/how_to_potentially_make_your_eglot_completions/
+ https://www.reddit.com/r/emacs/comments/1h2o8hr/share_your_mx_compile_compilationmode_config/
** from doom
+ format+ onsave
+ grammar
