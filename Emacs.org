#+TITLE: Emacs config
#+AUTHOR: Felix Dumbeck
#+STARTUP: fold
#+PROPERTY: header-args :emacs-lisp :tangle .config/emacs/init.el :results silent :mkdirp yes
#+auto_tangle: t

* preface

simple "performant" GNU Emacs 29.1+ [[https://leanpub.com/lit-config/read][literate config]] that uses as much built in stuff as possible and builds upon that where necessary

Works for me

* increase startup performance
** increase garbage collection threshold

make garbage-collection less active by increasing its threshold during startup so Emacs starts up faster

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))
#+end_src
** measure startup performance

in order to measure the time it takes for Emacs to startup use ~emacs-init-time~

see what packages are loaded at startup (*only have it enabled when debugging!*):

#+begin_src emacs-lisp :tangle no
  (setq use-package-verbose t)
#+end_src
* package management
Setup package repositories
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  ;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
  (require 'use-package-ensure) ;; make all use-package :ensure t
  (setq use-package-always-ensure t)
#+end_src
* keep .config/emacs clean

stop transient files from being created in the Emacs config folder

** change location of the custom file

prevent Emacs from adding custom settings to init.el and choose =custom.el= instead

#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (load custom-file 'noerror 'nomessage)
#+end_src
** auto generated files in tmp directory

*** keep backup files in a temporary directory

#+begin_src emacs-lisp
  (setq backup-dir (expand-file-name "tmp/backups/" user-emacs-directory))
  (setq backup-directory-alist `(("." . , backup-dir)))
  (setq delete-old-versions t)
#+end_src

  
*** keep  auto-save files in a temporary directory

#+begin_src emacs-lisp
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*", (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
#+end_src
* general
** user info
#+begin_src emacs-lisp
  (setq user-full-name "Felix Dumbeck"
        user-mail-address "f.dumbeck@campus.tu-berlin.de")
#+end_src
** user interface
*** show scratch buffer on startup
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src
*** flash when the bell rings

to avoid Emacs making a sound on things like trying to scroll past the first line make it flash the screen instead

#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src
*** disable UI dialogs as prompts
#+begin_src emacs-lisp
  (setq use-dialog-box nil)
#+end_src
*** remove GUI elements

remove the menu-bar tool-bar and scroll-bar as a measure to remove visual clutter

#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
#+end_src
*** lines
**** highlight current line
#+begin_src emacs-lisp
  (global-hl-line-mode t)
#+end_src
**** prettify symbols
#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src
**** enable line wrapping
#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src
**** show relative line numbers
#+begin_src emacs-lisp
  ;(global-display-line-numbers-mode t) ;; enable line numbers
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'org-mode-hook #'display-line-numbers-mode)
  (setq display-line-numbers-type 'relative) ;; make line numbers relative
#+end_src
** theme
*** cool themes (not used)
#+begin_src emacs-lisp :tangle no
  (use-package gruvbox-theme :defer)
  (use-package jazz-theme :defer)
  (use-package zenburn-theme)
  (use-package anti-zenburn-theme)
  (use-package hc-zenburn-theme)
  ;(load-theme 'gruvbox-dark-hard t)
  ;(load-theme 'gruvbox-light-soft t)
#+end_src
*** ef-themes
#+begin_src emacs-lisp
  (use-package ef-themes :defer)
#+end_src
#+begin_src emacs-lisp :tangle no
  ;(load-theme 'ef-cherie t)
  ;(load-theme 'ef-autumn t)
  ;(load-theme 'ef-dark t)
  ;(load-theme 'ef-spring t)
  ;(load-theme 'ef-melissa-light t)
  ;(load-theme 'ef-duo-light t)
  ;(load-theme 'ef-duo-dark t)
  ;(load-theme 'ef-night t)
#+end_src
*** auto pick theme
picks a light color-theme when the sun is risen and a dark theme when the sun is set

#+begin_src emacs-lisp
  (use-package circadian
    :config
    (setq calendar-latitude 52.5)
    (setq calendar-longitude 13.4)
    (setq circadian-themes '((:sunrise . ef-melissa-light)
                             (:sunset  . ef-autumn)))
    (circadian-setup))
#+end_src
** fonts
*** general font
#+begin_src emacs-lisp
  ;(set-frame-font "Fantasque Sans Mono 12" nil t)
  ;(set-frame-font "Comic Mono 12" nil t)
  (set-frame-font "Comic Shanns 13" nil t)
  ;(add-to-list 'default-frame-alist '(font . "Comic Mono 11"))
#+end_src
*** icon font
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src
** mode-line

show the mode status line from doom Emacs at the bottom to provide more information while looking nicer

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode t))
#+end_src

make it so mode line can be hidden by calling =hide-mode-line=

#+begin_src emacs-lisp :tangle no
  (use-package hide-mode-line
    :commands (hide-mode-line-mode))
#+end_src
** elf-feed
subscribe to rss-feeds
#+begin_src emacs-lisp
  (use-package elfeed)
  (global-set-key (kbd "C-x w") 'elfeed)
  (setq elfeed-feeds
        '("http://nullprogram.com/feed/"
          "https://mccd.space/feed.xml"
          "https://dthompson.us/feed.xml"
          "https://planet.emacslife.com/atom.xml"
          "https://archlinux.org/feeds/news/"))
#+end_src
** which-key

which-key is great for getting an overview of what keybindings are available based on the prefix keys you entered.
it shows a table of all possible ways you can finish a shortcut after having started one

#+begin_src emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src
** various
*** delete current file
from: [[http://xahlee.info/emacs/emacs/elisp_delete-current-file.html][Emacs: Delete Current File üöÄ]]
#+begin_src emacs-lisp
  (defun delete-current-file-make-backup ()
    "Delete current file, makes a backup~, close the buffer.
  If buffer is not a file, copy content to `kill-ring', delete buffer.
  If buffer is a file, the file's directory is shown with cursor at the next file.

  Backup filename is ‚Äú‚Äπname‚Ä∫~‚ÄπdateTimeStamp‚Ä∫~‚Äù. Existing file of the same name is overwritten. If buffer is not a file, the backup file name starts with ‚Äúxx_‚Äù.

  URL `http://xahlee.info/emacs/emacs/elisp_delete-current-file.html'
  Version: 2018-05-15 2023-08-11 2023-10-28"
    (interactive)
    (when (eq major-mode 'dired-mode)
      (user-error "%s: In dired. Nothing is done." real-this-command))
    (let ((xfname buffer-file-name)
          (xbuffname (buffer-name))
          xbackupPath)
      (setq xbackupPath
            (concat
             backup-dir
             (format "~%s~" (format-time-string "%Y-%m-%d_%H%M%S"))))
      (if xfname
          (progn
            (save-buffer xfname)
            (rename-file xfname xbackupPath t)
            (kill-buffer xbuffname)
            (message "File deleted. Backup at
  %s" xbackupPath)
            (when (boundp 'xah-recently-closed-buffers)
              (push (cons nil xbackupPath) xah-recently-closed-buffers)))
        (progn
          (widen)
          (kill-new (buffer-string))
          (kill-buffer xbuffname)
          (message "non-file buffer killed. buffer text copied to `kill-ring'."))))
    (when (eq major-mode 'dired-mode) (revert-buffer)))
  (global-set-key (kbd "C-x x x") 'delete-current-file-make-backup)
#+end_src
*** show recently opened files first in minibuffers
#+begin_src emacs-lisp
  (recentf-mode t)
#+end_src
*** save last location in file
#+begin_src emacs-lisp
  (save-place-mode t)
#+end_src
*** replace selection

typed text replaces the selection if the selection is active, pressing delete or backspace deletes the selection

#+begin_src emacs-lisp
  (delete-selection-mode)
#+end_src
*** revert (update) buffers when the underlying file has changed
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
  ;; revert dired and other buffers
  (setq global-auto-revert-non-file-buffers t)
#+end_src
*** yank (paste) when pressing C-z

because it is very confusing when switching between qwerty and qwertz and the window gets minimized

#+begin_src emacs-lisp
  (global-set-key (kbd "C-z") 'yank)
#+end_src
*** kill buffer and close window

kill the current buffer and close its window/frame with =C-x C-k=

#+begin_src emacs-lisp
  (defun kill-buffer-and-close-window ()
    "Kill the current buffer and close its window."
    (interactive)
    (kill-buffer)
    (delete-window))
  (global-set-key (kbd "C-x C-k") 'kill-buffer-and-close-window)
#+end_src
* completion System
** minibuffer completion
*** vertico

performant and minimalist vertical completion UI based on the default completion system for minibuffers

**** buffer auto-completion with vertico

#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
#+end_src

**** candidate meta information with marginalia

show meta information about vertico completion options (eg. file size, last edited)

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :init
    (marginalia-mode))
#+end_src

**** vertico show candidate icons

icons for completion options

#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :after (all-the-icons marginalia)
    :init (all-the-icons-completion-mode)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))
#+end_src

**** set command history length

#+begin_src emacs-lisp
  (setq history-length 50)
  (savehist-mode t)
#+end_src

**** Improve Candidate Filtering with Orderless

improve vertico and corfu completions by allowing matches to search terms differently ordered

#+begin_src emacs-lisp
  (use-package orderless
    :after vertico
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** consult
#+begin_src emacs-lisp
  (use-package consult
    :bind ("C-c r" . 'consult-ripgrep)
    :config
    (keymap-global-set "C-s" 'consult-line)
    (keymap-set minibuffer-local-map "C-r" 'consult-history)
    (setq completion-in-region-function #'consult-completion-in-region))
#+end_src
** normal buffer completion
*** corfu

in-buffer completion UI on top of the built-in completion framework

**** main config
#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    (corfu-auto-prefix 2) ;; show completions after two letters
    (corfu-auto-delay 0) ;; show completions immediatly
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin
    :init
    (global-corfu-mode)
    (corfu-history-mode)
    (corfu-popupinfo-mode)
    :config
    (setq corfu-popupinfo-delay nil))
#+end_src
**** nerd-icons-corfu
add nerd-font icons to corfu completion candidates
#+begin_src emacs-lisp
  (use-package nerd-icons-corfu
    :init
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src
**** enable auto-completions in eshell
#+begin_src emacs-lisp
  (add-hook 'eshell-mode-hook
            (lambda ()
              (setq-local corfu-auto nil)
              (corfu-mode)))
#+end_src
*** cape

extend the built in completion at point functionality

#+begin_src emacs-lisp
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-elisp-symbol)
           ("C-c p e" . cape-elisp-block)
           ("C-c p a" . cape-abbrev)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p :" . cape-emoji);;; might be deleted
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-history)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    (add-to-list 'completion-at-point-functions #'cape-abbrev)
    (add-to-list 'completion-at-point-functions #'cape-dict)
    (add-to-list 'completion-at-point-functions #'cape-emoji)
    ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )
#+end_src
* org-mode
** defer startup

for an improved Emacs startup time loading =org= is deferred until it is actually needed

#+begin_src emacs-lisp
  (use-package org
    :defer t
    :commands (org-mode))
#+end_src
** functionality
*** suggest headings when inserting link
when inserting a new link to a heading in the current document, an auto completion minibuffer will pop up, suggesting all headings in the current document. From: [[https://howardism.org/Technical/Emacs/tiddly-wiki-in-org.html][TiddlyWiki In Org]]
#+begin_src emacs-lisp
  (defun unpropertize (string)
    "Removes all text properties from STRING."
    (set-text-properties 0 (length string) nil string) string)
  (defun org-get-headings ()
    "Return a list of an org document's headings."
    (org-map-entries (lambda () (unpropertize (org-get-heading t t t t)))))
  (defun org-insert-link-headline (header)
    "Insert internal link to HEADER entry in current file."
    (interactive (list (completing-read "Link: " (org-get-headings) nil nil)))
    (org-insert-link nil header))
  ;(define-key org-mode-map (kbd "C-c h") 'org-insert-link-headline)
#+end_src
*** export to latex

when exporting org mode to latex, keep the comments

#+begin_src emacs-lisp
  (defun transform-comments (backend)
    (while (re-search-forward "[:blank:]*# " nil t)
      (replace-match "#+LATEX: % ")))
    (add-hook 'org-export-before-parsing-hook #'transform-comments)
#+end_src
*** org-contrib
add contrib package for extra features
#+begin_src emacs-lisp :tangle no
  (use-package org-contrib
    :after org-mode)
#+end_src
*** start up folded
#+begin_src emacs-lisp
  (setq org-startup-folded t)
#+end_src
*** org-cliplink

give pasted links the title provided by the meta-information of the website

#+begin_src emacs-lisp
  
  (use-package org-cliplink
    :bind ("C-x p i" . org-cliplink))
#+end_src
*** ox-hugo

export org-mode files to HTML pages using hugo

#+begin_src emacs-lisp
  (use-package ox-hugo
    :after org-mode
    :commands org-hugo-auto-export-mode)
#+end_src
*** drag-and-drop

enable drag-and-drop support for images and files; inserts inline previews for images and an icon+link for other media types.

#+begin_src emacs-lisp :tangle no
  (use-package org-download
    :defer t
    :hook (org-mode #'org-download-mode))
#+end_src
** navigation
*** use M-p and M-n to go up and down org levels (disabled)
disabled because it conflicts with the [[jinx spellchecking, using enchant]] shortcuts
#+begin_src emacs-lisp :tangle no
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "M-p") 'org-up-element)))
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "M-n") 'org-down-element)))
#+end_src
*** replace S-M-arrow-key with S-M-{n,p,b,f}
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
             (lambda ()
               (local-set-key (kbd "M-F") 'org-shiftmetaright)))
  (add-hook 'org-mode-hook
             (lambda ()
             (local-set-key (kbd "M-B") 'org-shiftmetaleft)))
  (add-hook 'org-mode-hook
             (lambda ()
               (local-set-key (kbd "M-P") 'org-move-subtree-up)))
  (add-hook 'org-mode-hook
             (lambda ()
             (local-set-key (kbd "M-N") 'org-move-subtree-down)))
#+end_src

** improve looks
*** general
#+begin_src emacs-lisp
  (setq org-startup-indented t
        ;org-pretty-entities t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-image-actual-width '(300))
#+end_src
*** how hidden emphasis markers

show style emphasis markers such as the * in =*bold*= when hovering over the word

#+begin_src emacs-lisp
  (use-package org-appear
    :hook (org-mode . org-appear-mode))
#+end_src
*** fonts and bullets
**** org-superstar (disabled)

make bullet points and headings look nicer

#+begin_src emacs-lisp :tangle no
  (use-package org-superstar
    ;:after org-mode
    :hook (org-mode . org-superstar-mode))
#+end_src
**** increase heading and title size 
#+begin_src emacs-lisp
  (custom-set-faces
   '(org-level-1 ((t (:height 1.75))))
   '(org-level-2 ((t (:height 1.5))))
   '(org-level-3 ((t (:height 1.25))))
   '(org-level-4 ((t (:height 1.1))))
   '(org-document-title ((t (:height 1.5)))))
#+end_src
** table of contents

auto generate a table of contents and update on save

#+begin_src emacs-lisp :tangle no
  (use-package toc-org
    :after org-mode
    :command tor-org-enable
    :hook (org-mode . toc-org-mode))
  (use-package org-make-toc
    :after org-mode
    :hook (org-mode . org-make-toc-mode))
#+end_src

** org-babel
*** block templates
these templates enable you to type things like =<el= and then hit Tab to expand the template.
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("ba" . "src bash"))
  (add-to-list 'org-structure-template-alist '("zs" . "src zsh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  (add-to-list 'org-structure-template-alist '("tex" . "src latex"))
  (add-to-list 'org-structure-template-alist '("rs" . "src rust"))
#+end_src

*** execute source code blocks without confirmation
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src
*** org-auto-tangle

when ~#+auto_tangle: t~ is set in the beginning of an org-file, tangle all code blocks that are set to tangle when saving

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src
*** languages
**** rust
#+begin_src emacs-lisp :tangle no
  (use-package ob-rust
    :after org-mode)
#+end_src
**** guile
#+begin_src emacs-lisp :tangle no
 (use-package geiser-guile)
#+end_src
**** shells (sh, bash, zsh, fish, etc.)
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)))
#+end_src
** org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/Notes"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode))
#+end_src
** org agenda
*** set a shortcut to open the agenda view
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c a") #'org-agenda)
#+end_src
*** time window
make it so the agenda always starts today and we can see two weeks from today instead of just until Sunday
#+begin_src emacs-lisp
  (setq org-agenda-start-day "0d")
  (setq org-agenda-span 20)
  (setq org-agenda-start-on-weekday nil)
#+end_src
*** set org-agenda files
the files that org-agenda will visit to search for timestamps to use when creating the agenda
#+begin_src emacs-lisp
    (setq org-agenda-files
          '("~/uni/uni.org"
            "~/uni/personal.org"))
#+end_src
* editing configuration
** folding
set shortcuts for fold (collapse and expand) regions of text/code-blocks
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'hs-minor-mode)
  (global-set-key (kbd "C-c C-h") 'hs-hide-block)
  (global-set-key (kbd "C-c C-s") 'hs-show-block)
  (global-set-key (kbd "C-c C-t") 'hs-toggle-hiding)
  (global-set-key (kbd "C-<tab>") 'hs-toggle-hiding)
  (global-set-key (kbd "C-c C-a") 'hs-show-all)
  (global-set-key (kbd "C-c C-l") 'hs-hide-all)
#+end_src
** kill line backwards
position of the pointer to the beginning of the line with =C-S-k=
#+begin_src emacs-lisp
  (defun kill-line-backward ()
    "Kill line backwards from the position of the pointer to the beginning of the line."
    (interactive)
    (kill-line 0))
  (global-set-key (kbd "C-S-k") 'kill-line-backward)
#+end_src
** multiple cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors)
  (global-set-key (kbd "C-;") 'mc/edit-lines)
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src
** spellcheck
*** flyspell (not active)
use flyspell, the default spellcheck
#+begin_src emacs-lisp :tangle no
  (use-package flyspell-correct
    :after flyspell
    :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))
    (define-key flyspell-mode-map (kbd "C-M-i") #'flyspell-correct-word)
#+end_src
*** jinx spellchecking, using enchant
requires (lib-)enchant using hunspell dictionaries
#+begin_src emacs-lisp
  (use-package jinx
    :hook (emacs-startup . global-jinx-mode)
    :bind (("M-$" . jinx-correct)
           ("C-M-$" . jinx-languages)
           ("M-p" . jinx-previous)
           ("M-n" . jinx-next)))
  ;; (add-hook 'emacs-startup-hook #'global-jinx-mode)
  ;; (keymap-global-set "M-$" #'jinx-correct)
  ;; (keymap-global-set "C-M-$" #'jinx-languages)
  ;; (keymap-global-set "M-p" #'jinx-previous)
  ;; (keymap-global-set "M-n" #'jinx-next)
  #+end_src
** highlight TODO

highlight TODO FIXME etc.

#+begin_src emacs-lisp
  (use-package hl-todo
      :hook ((prog-mode . hl-todo-mode)
             (org-mode . hl-todo-mode))
      :config
      ;(keymap-set hl-todo-mode-map "C-c p" #'hl-todo-previous)
      ;(keymap-set hl-todo-mode-map "C-c n" #'hl-todo-next)
      ;(keymap-set hl-todo-mode-map "C-c o" #'hl-todo-occur)
      ;(keymap-set hl-todo-mode-map "C-c i" #'hl-todo-insert)
      )

    (setq hl-todo-keyword-faces
          '(("TODO"   . "#FF0000")
            ("FIXME"  . "#FF0000")
            ("DEBUG"  . "#A020F0")
            ("GOTCHA" . "#FF4500")
            ("STUB"   . "#1E90FF")))
#+end_src
** rainbow delimiters

match brackets and other delimiters by color to see the current scope more easily

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** auto close brackets FIXME 
*** smartparens
#+begin_src emacs-lisp
  (use-package smartparens-mode
  :ensure smartparens  ;; install the package
  :hook (prog-mode text-mode markdown-mode) ;; add `smartparens-mode` to these hooks
  :config
  (require 'smartparens-config))
#+end_src
*** electric behavior

auto indent,  via electric-mode

#+begin_src emacs-lisp
  ;(electric-pair-mode t)
  (electric-indent-mode t)
  ;(electric-quote-mode t)
  (setq minibuffer-default-prompt-format " [%s]") ; Emacs 29
  (minibuffer-electric-default-mode 1)
#+end_src
* development
** projectile
** git
*** magit
#+begin_src emacs-lisp
  (use-package magit
    :commands magit)
#+end_src

to prevent being asked to type the ssh-key password on every action make it so magit knows the ssh-key-agents location:

#+begin_src emacs-lisp
    (use-package keychain-environment
      :after magit)
#+end_src
*** diff-hl

highlight uncommitted, changed lines on the side of a buffer

#+begin_src emacs-lisp
  (use-package diff-hl
    :init (global-diff-hl-mode)
    :hook (dired-mode . diff-hl-dired-mode))
#+end_src
** tree-sitter

automatically detect the appropriate tree-sitter mode dependent on the language mode and file type

#+begin_src emacs-lisp
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src
** languages
*** typst (not working)
#+begin_src emacs-lisp :tangle no
    (use-package typst-ts-mode
  ;:type git :host sourcehut :repo "meow_king/typst-ts-mode"
  :straight (your-package :type git :host git.sr.ht :repo "meow_king/typst-ts-mode")
  :custom
  ;; don't add "--open" if you'd like `watch` to be an error detector
  (typst-ts-mode-watch-options "--open")

  ;; experimental settings (I'm the main dev, so I enable these)
  (typst-ts-mode-enable-raw-blocks-highlight t)
  (typst-ts-mode-highlight-raw-blocks-at-startup t))
#+end_src
*** markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("\\.md\\'" . markdown-view-mode)
    :init (setq markdown-command "multimarkdown"))
#+end_src
*** shell (disabled)

enable shellcheck using flymake for checking correctness and scanning common mistakes in shell-code

#+begin_src emacs-lisp :tangle no
  (use-package flymake-shellcheck
    :hook (bash-ts-mode . flymake-shellcheck-mode))
#+end_src
*** rust (not used)
#+begin_src emacs-lisp :tangle no
  (defvar rust-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "C-c C-d") #'rust-dbg-wrap-or-unwrap)
      (when rust-load-optional-libraries
        (define-key map (kbd "C-c C-c C-u") 'rust-compile)
        (define-key map (kbd "C-c C-c C-k") 'rust-check)
        (define-key map (kbd "C-c C-c C-t") 'rust-test)
        (define-key map (kbd "C-c C-c C-r") 'rust-run)
        (define-key map (kbd "C-c C-c C-l") 'rust-run-clippy)
        (define-key map (kbd "C-c C-f") 'rust-format-buffer)
        (define-key map (kbd "C-c C-n") 'rust-goto-format-problem))
      map)
    "Keymap for Rust major mode.")
#+end_src
*** ruby
#+begin_src emacs-lisp
  (use-package erblint)
#+end_src
*** javascript
#+begin_src emacs-lisp
  (use-package flymake-eslint)
#+end_src
*** elm-mode
#+begin_src emacs-lisp
  (use-package elm-mode)
  (setq elm-mode-hook '(elm-indent-simple-mode))
  (add-hook 'elm-mode-hook 'elm-format-on-save-mode)
#+end_src
*** webmode
#+begin_src emacs-lisp
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode)))
#+end_src
*** makefile

auto enable makefile-mode for Makefiles

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("Makefile" . makefile-mode))
#+end_src
** flymake
finding syntax errors on the fly, also works with eglot and spellcheck (it also might be worth checking out [[[https://www.flycheck.org] Flycheck]])
#+begin_src emacs-lisp
  ;(define-key flymake-mode-map (kbd "M-n") 'flymake-goto-next-error)
  ;(define-key flymake-mode-map (kbd "M-p") 'flymake-goto-prev-error)
  (global-set-key (kbd "M-n") 'flymake-goto-next-error)
  (global-set-key (kbd "M-p") 'flymake-goto-prev-error)
#+end_src
** eglot

add keybindings for when in eglot-mode (Emacs' built in language-server)

#+begin_src emacs-lisp
  (require 'eglot)
  (define-key eglot-mode-map (kbd "C-c c r") 'eglot-rename)
  (define-key eglot-mode-map (kbd "C-c c o") 'eglot-code-action-organize-imports)
  (define-key eglot-mode-map (kbd "C-c c h") 'eldoc)
  (define-key eglot-mode-map (kbd "C-c c a") 'eglot-code-actions)
  (define-key eglot-mode-map (kbd "C-c c f") 'eglot-format-buffer)
  (define-key eglot-mode-map (kbd "C-c c q") 'eglot-code-action-quickfix)
  (define-key eglot-mode-map (kbd "C-c c e") 'eglot-code-action-extract)
  (define-key eglot-mode-map (kbd "<f6>") 'xref-find-definitions)
  (define-key eglot-mode-map (kbd "M-.") 'xref-find-definitions)
#+end_src
* applications
** restclient
manually explore and test HTTP REST webservices
#+begin_src emacs-lisp
  (use-package restclient)
#+end_src
** dired
*** show file icons
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :defer t
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
*** show sizes of all files in human readable format
#+begin_src emacs-lisp
  (setq dired-listing-switches "-alh")
#+end_src
*** automatically update dired buffers on revisiting their directory
#+begin_src emacs-lisp
  (setq dired-auto-revert-buffer t)
#+end_src
*** make dired guess the target directory when copying
#+begin_src emacs-lisp
  (setq dired-dwim-target t)
#+end_src
** email
email with notmuch
#+begin_src emacs-lisp
  
#+end_src
** vterm
complete terminal in Emacs
#+begin_src emacs-lisp :tangle no
  (use-package vterm
    :commands vterm)
#+end_src
** eshell

set M-RET shortcut for opening eshell

#+begin_src emacs-lisp
  (global-set-key (kbd "M-RET") 'eshell)
#+end_src
** htmlize

display current buffer as html

#+begin_src emacs-lisp
  (use-package htmlize
    :defer t)
#+end_src
** pdf-tools

better interaction with pdf

#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer t
    :mode ("\\.pdf\\'" . pdf-view-mode))
#+end_src
** emacs-everywhere (not working)

use ~emacsclient --eval "(emacs-everywhere)"~ from another window when writing text to open this text in an Emacs buffer. Type =C-c C-c= to reinsert the edited text into the text field.

*Warning!* this does currently not work under Wayland

#+begin_src emacs-lisp :tangle no
  (use-package emacs-everywhere)
#+end_src
* runtime performance
make garbage-collection pauses faster by decreasing the threshold, increasing the runtime performance
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src
* TODO
+ native compile
+ use tabs for indentation and make them "sticky"???
+ email
  + gnus
  + mu4e: [[https://www.youtube.com/watch?v=yZRyEhi4y44&pp=ygULZW1hY3MgZW1haWw%3D][Streamline Your E-mail Management with mu4e - Emacs Mail - YouTube]]
+ handle passwords: [[https://www.youtube.com/watch?v=nZ_T7Q49B8Y][How to Encrypt Your Passwords with Emacs - YouTube]]
* look into
+ [[https://github.com/Wilfred/deadgrep?tab=readme-ov-file][GitHub - Wilfred/deadgrep: fast, friendly searching with ripgrep and Emacs]]
+ [[https://www.emacswiki.org/emacs/HippieExpand][EmacsWiki: Hippie Expand]]
+ [[https://github.com/emacs-sideline/sideline][GitHub - emacs-sideline/sideline: Show information on the side]]
+ for eshell [[https://github.com/xenodium/dotsies][GitHub - xenodium/dotsies: Dot files, Emacs config, etc]]
+ [[https://github.com/bbatsov/crux][GitHub - bbatsov/crux: A Collection of Ridiculously Useful eXtensions for Emacs]]
+ [[https://github.com/emacs-eaf/emacs-application-framework/?tab=readme-ov-file][GitHub - emacs-eaf/emacs-application-framework: EAF, an extensible framework ...]]
+ [[https://github.com/d12frosted/flyspell-correct][GitHub - d12frosted/flyspell-correct: Distraction-free words correction with ...]]
+ look at my doom config
+ [[https://github.com/tmalsburg/helm-bibtex][GitHub - tmalsburg/helm-bibtex: Search and manage bibliographies in Emacs]]
  [[https://orgmode.org/manual/Citations.html][Citations (The Org Manual)]]
+ [[https://github.com/Fuco1/smartparens][GitHub - Fuco1/smartparens: Minor mode for Emacs that deals with parens pairs...]]
+ avy [[https://github.com/abo-abo/avy][GitHub - abo-abo/avy: Jump to things in Emacs tree-style]]
+ embark [[https://protesilaos.com/codelog/2024-02-17-emacs-modern-minibuffer-packages/][Emacs: modern minibuffer packages (Vertico, Consult, etc.) | Protesilaos Stavrou]]
+ wgrep [[https://protesilaos.com/codelog/2024-02-17-emacs-modern-minibuffer-packages/][Emacs: modern minibuffer packages (Vertico, Consult, etc.) | Protesilaos Stavrou]]
+ org-present
+ treemacs
+ denote instead of org-roam
+ ibuffer
+ deft
+ useful but not needed
  ruby
  [[https://github.com/pezra/rspec-mode][GitHub - pezra/rspec-mode: An RSpec minor mode for Emacs]]
+ editorconfig
+ look into: [[https://github.com/SystemCrafters/crafted-emacs][GitHub - SystemCrafters/crafted-emacs: A sensible base Emacs configuration.]]
+ instead of auto-ts-mode [[https://github.com/emacs-tree-sitter/tree-sitter-langs][GitHub - emacs-tree-sitter/tree-sitter-langs: Language bundle for Emacs's tre...]]
+ ts-mode replaces c-mode so I can't change things like the cmode anymore
+ [[https://github.com/LionyxML/auto-dark-emacs][GitHub - LionyxML/auto-dark-emacs: Auto-Dark-Emacs is an auto changer between...]]
+ gcmh: dynamic garbage collection for improving speed
+ Combobulate: https://github.com/mickeynp/combobulate uses Tree-Sitter to provide a structured movement within your code [[https://www.masteringemacs.org/article/combobulate-structured-movement-editing-treesitter][Combobulate: Structured Movement and Editing with Tree-Sitter]]
+ crafted org config: [[file:~/crafted-emacs/docs/crafted-org.org]]
+ [[https://github.com/mclear-tools/tabspaces][GitHub - mclear-tools/tabspaces]]
** from doom
+ format+ onsave
+ grammar
