#+TITLE: emacs config
#+AUTHOR: felix dumbeck
#+PROPERTY: header-args :emacs-lisp :tangle .config/emacs/init.el :results silent :mkdirp yes
#+auto_tangle: t

* preface

simple "performant" GNU emacs 29.1+ [[https://leanpub.com/lit-config/read][literate config]] that uses as much built in stuff as possible and builds upon that where necessary

Werks for me

* startup performance

make emacs startup faster

** increase gc threshold

make gc less active by increasing its threshold during startup so emacs starts up faster

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** measure startup perfomance

in order to measure the time it takes for Emacs to startup use ~emacs-init-time~

see what packages are loaded at startup (*only have it enabled when debugging!*):

#+begin_src emacs-lisp :tangle no
  (setq use-package-verbose t)
#+end_src

* package Management

Setup package repos

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
  ;; make all use-package :ensure t
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

* keep .config/emacs clean

stop transient files from being created in the emacs config folder

** no-littering

use no-littering to automatically set common paths to the new user-emacs-directory

#+begin_src emacs-lisp
  (use-package no-littering
    :init
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src

** auto generated files in tmp directory

keep backup files in a temporary directory

#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
#+end_src
  
keep  auto-save files in a temporary directory

#+begin_src emacs-lisp
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*", (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
#+end_src

* general
** user info

#+begin_src emacs-lisp
  (setq user-full-name "Felix"
        user-mail-address "f.dumbeck@campus.tu-berlin.de")
#+end_src

** user interface
*** startup

show empty org-mode scratch buffer at startup

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq initial-major-mode 'org-mode ;; Major mode of new buffers
        initial-scratch-message ""
        initial-buffer-choice t) ;; Blank scratch buffer
#+end_src

*** flash when the bell rings

to avoid emacs making a sound on things like trying to scroll past the first line make it flash the screen instead

#+begin_src  emacs-lisp
  (setq visible-bell t)
#+end_src

*** remove GUI elements

remove the menu-bar tool-bar and scroll-bar as a measure to remove visual clutter

#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
#+end_src

*** lines
**** enable line highlighting

#+begin_src emacs-lisp
  (global-hl-line-mode t)
#+end_src

**** prettify symbols

#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src

**** enable line wrapping

#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src

**** show relative line numbers

#+begin_src emacs-lisp
  (global-display-line-numbers-mode t) ;; enable line numbers
  (setq display-line-numbers-type 'relative) ;; make line numbers relative
#+end_src

** theme

picks a light color-theme when the sun is risen and a dark theme when the sun is set

#+begin_src emacs-lisp :tangle no
  (use-package gruvbox-theme)
  (use-package circadian
    :config
    (setq calendar-latitude 52.5)
    (setq calendar-longitude 13.4)
    (setq circadian-themes '((:sunrise . gruvbox-light-soft)
                             (:sunset  . gruvbox-dark-soft)))
    (circadian-setup))
#+end_src

*** ef-autumn

#+begin_src emacs-lisp
  (use-package ef-themes)
  (load-theme 'ef-autumn t)
#+end_src

** fonts
*** general font
#+begin_src emacs-lisp
  (set-frame-font "Fantasque Sans Mono 11" nil t)
#+end_src
*** icon font
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src
*** enable emojis ðŸ˜Ž
#+begin_src emacs-lisp
  (use-package emojify
    :init (global-emojify-mode))
#+end_src
** modeline

use the mode status line form doom emacs to provide more information while looking nicer

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode t))
#+end_src
** which-key

which-key is great for getting an overview of what keybindings are available based on the prefix keys you entered.

#+begin_src emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src

** various
*** show recently opened files first

#+begin_src emacs-lisp
  (recentf-mode t)
#+end_src

*** save location in file

#+begin_src emacs-lisp
  (save-place-mode t)
#+end_src

*** Revert buffers when the underlying file has changed

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

*** kill buffer and close window

kill the current buffer and close its window with =C-x C-k=

#+begin_src emacs-lisp
  (defun kill-buffer-and-close-window ()
    "Kill the current buffer and close its window."
    (interactive)
    (kill-buffer)
    (delete-window))
  (global-set-key (kbd "C-x C-k") 'kill-buffer-and-close-window)
#+end_src

* completion System
** vertico

performant and minimalistic vertical completion UI based on the default completion system for minibuffers

*** buffer autocompletion with vertico

#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
#+end_src

*** candidate meta information

show meta information about vertico completion options (eg. file size, last edited)

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :init
    (marginalia-mode))
#+end_src

*** vertico candidate icons

icons for completion options

#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :after (all-the-icons marginalia)
    :init (all-the-icons-completion-mode)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))
#+end_src

*** save command history

#+begin_src emacs-lisp
  (setq history-length 30)
  (savehist-mode t)
#+end_src

*** Improve Candidate Filtering with Orderless

improve vertico and corfu completions by allowing matches to search terms differently ordered

#+begin_src emacs-lisp
  (use-package orderless
    :after vertico
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** corfu

in-buffer completion UI on top of the built-in completion framework

#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    (corfu-auto-refix 2) ;; show completions after two letters
    (corfu-auto-delay 0.0) ;; show completions immediatly
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin
    :init
    (global-corfu-mode)
    (corfu-history-mode)
    (corfu-popupinfo-mode)
    :config
    (setq corfu-popupinfo-delay nil))
#+end_src

*** nerd-icons-corfu

add nerd-font icons to corfu completion candidates

#+begin_src emacs-lisp
  (use-package nerd-icons-corfu
    :init
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

*** enable autocompletions in eshell

#+begin_src emacs-lisp :tangle no
  (add-hook 'eshell-mode-hook
            (lambda ()
              (setq-local corfu-auto nil)
              (corfu-mode))
#+end_src

** cape

extend the built in completion at point functionality

#+begin_src emacs-lisp
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-elisp-symbol)
           ("C-c p e" . cape-elisp-block)
           ("C-c p a" . cape-abbrev)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p :" . cape-emoji)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    (add-to-list 'completion-at-point-functions #'cape-dict)
    (add-to-list 'completion-at-point-functions #'cape-emoji)
    ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )
#+end_src

* org-mode
** defer startup

for an improved emacs startup time loading =org= is defered until it is actually needed

#+begin_src emacs-lisp
  (use-package org
    :defer t
    :commands (org-mode))
#+end_src

** functionality
*** org-contrib

add contrib package for extra features and add org-tempo for expanding structual blocks from shortcuts eg. =<sTAB= will turn into =#+begin_src #+end_src=

#+begin_src emacs-lisp
  (use-package org-contrib
    :init (require 'org-tempo)
    :after org-mode)
#+end_src

*** org-cliplink

give pasted links the title provided by the meta-information of the website

#+begin_src emacs-lisp
  (use-package org-cliplink
    :after org-mode
    :bind ("C-x p i" . org-cliplink))
#+end_src

*** org-reveal

create beautiful slide-shows from org documents

#+begin_src emacs-lisp
  (use-package ox-reveal
    :after org-mode
    :config
    (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))
#+end_src

*** ox-hugo

export org-mode files to html pages using hugo

#+begin_src emacs-lisp
  (use-package ox-hugo
    :after org-mode
    :commands org-hugo-auto-export-mode)
#+end_src
*** drag-and-drop

enable drag-and-drop support for images and files; inserts inline previews for images and an icon+link for other media types.

#+begin_src emacs-lisp
  (use-package org-download
    :after org-mode
    :config (add-hook 'dired-mode-hook #'org-download-enable))
#+end_src

** navigation

use M-p and M-n to go up and down org levels

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "M-p") 'org-up-element)))
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "M-n") 'org-down-element)))
#+end_src

** improve looks
*** general

#+begin_src emacs-lisp
  (setq org-startup-indented t
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-image-actual-width '(300))
#+end_src

*** how hidden emphasis markers

show style emphasis markers such as the * in =*bold*= when hovering over the word

#+begin_src emacs-lisp
  (use-package org-appear
    :hook (org-mode . org-appear-mode))
#+end_src

*** fonts and bullets
**** org-superstar

make bullet points and headings look nice

#+begin_src emacs-lisp :tangle no
  (use-package org-superstar
    :after org-mode
    :hook (org-mode . org-superstar-mode))
#+end_src

**** change heading and title size 

#+begin_src emacs-lisp
  (custom-set-faces
   '(org-level-1 ((t (:height 1.75))))
   '(org-level-2 ((t (:height 1.5))))
   '(org-level-3 ((t (:height 1.25))))
   '(org-level-4 ((t (:height 1.1))))
   '(org-document-title ((t (:height 1.5)))))
#+end_src

** table of contents

auto generate a table of contents and update on save

#+begin_src emacs-lisp
  (use-package org-make-toc
    :after org-mode
    :hook (org-mode . org-make-toc-mode))
#+end_src

** structure blocks
*** block templates

these templates enable you to type things like =<el= and then hit Tab to expand the template.

#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("ba" . "src bash"))
  (add-to-list 'org-structure-template-alist '("zs" . "src zsh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  (add-to-list 'org-structure-template-alist '("tex" . "src latex"))
  (add-to-list 'org-structure-template-alist '("rs" . "src rust"))
#+end_src

*** org-auto-tangle

when ~#+auto_tangle: t~ is set in the beginning of an org-file tangle all code blocks that are set to tangle

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

*** languages
**** rust

#+begin_src emacs-lisp
  (use-package ob-rust
    :after org-mode)
#+end_src

**** shells

support for shells such as sh, bash, zsh, fish ...

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)))
#+end_src

** org-roam

#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/Desktop/Notes"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode))
#+end_src

** org agenda
*** set a shortcut to open the agenda view

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c a") #'org-agenda)
#+end_src

*** insert a closed timestamp whenever a task is done

#+begin_src emacs-lisp :tangle no
  (setq org-log-done t)
#+end_src

*** time window

make it so the agenda always starts yesterday and we can see +7 days from today instead of just until sunday

#+begin_src emacs-lisp
  (setq org-agenda-start-day "0d")
  (setq org-agenda-span 7)
  (setq org-agenda-start-on-weekday nil)
#+end_src

*** set org-agenda files

the files that org-agenda will visit to search for timestamps to use when creating the agenda

#+begin_src emacs-lisp
  (setq org-agenda-files
        '("~/Desktop/Uni/uni.org"
          "~/personal.org" ))
#+end_src

* editing configuration
** folding

set shortcuts for fold (collapse and expand) regions of text

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-h") 'hs-hide-block)
  (global-set-key (kbd "C-c C-s") 'hs-show-block)
  (global-set-key (kbd "C-c C-t") 'hs-toggle-hiding)
  (global-set-key (kbd "C-c C-a") 'hs-show-all)
  (global-set-key (kbd "C-c C-l") 'hs-hide-all)
#+end_src

** kill line backwards

position of the pointer to the beginning of the line with =C-S-k=

#+begin_src emacs-lisp
  (defun kill-line-backward ()
    "Kill line backwards from the position of the pointer to the beginning of the line."
    (interactive)
    (kill-line 0))
  (global-set-key (kbd "C-S-k") 'kill-line-backward)
#+end_src

** multiple cursors

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :defer t
    :bind(("C-;" . mc/edit-lines)
          ("C->" . mc/mark-next-like-this)
          ("C-<" . mc/mark-previous-like-this)
          ("C-c C-<" . mc/mark-all-like-this)))
#+end_src
    :config
    (global-set-key (kbd "C-;") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))

** highlight todo

hightlight todo fixme etc.

#+begin_src emacs-lisp :tangle no
  (use-package hl-todo
    :hook ((prog-mode . hl-todo-mode)
           (org-mode . hl-todo-mode))
    :bind (("C-c p" . hl-todo-previous)
           ("C-c P" . hl-todo-next)
           ("C-c o" . hl-todo-occur)
           ("C-c i" . hl-todo-insert))
    :config
    (setq hl-todo-keyword-faces
          '(("TODO"   . "#FF0000")
            ("FIXME"  . "#FF0000")
            ("DEBUG"  . "#A020F0")
            ("GOTCHA" . "#FF4500")
            ("STUB"   . "#1E90FF"))))
#+end_src

** rainbow delimiters

match brackets and other delimiters by colour to see the current scope more easily

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** electric pair mode

auto close braces, tags, etc.

#+begin_src emacs-lisp
  (electric-pair-mode t)
#+end_src

* development
** git
*** magit

#+begin_src emacs-lisp
  (use-package magit
    :commands magit)
#+end_src

to prevent being asked to type the ssh-key password on every action make it so magit knows the ssh-key-agents location:

#+begin_src emacs-lisp
    (use-package keychain-environment
      :after magit)
#+end_src

*** diff-hl

highlight uncommited, changed lines on the side of a buffer

#+begin_src emacs-lisp
  (use-package diff-hl
    :init (global-diff-hl-mode))
#+end_src

** treesitter

automatically detect the approriate treesitter mode dependant on the language mode

#+begin_src emacs-lisp
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src

** languages
*** guile scheme

#+begin_src emacs-lisp
    (use-package geiser-guile
      :hook (scheme-mode . geiser-guile))
#+end_src

*** markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("\\.md\\'" . markdown-view-mode)
    :init (setq markdown-command "multimarkdown"))
#+end_src
*** shell

enable shellcheck using flymake for checking correctness and scanning common mistakes in shellcode

#+begin_src emacs-lisp
  (use-package flymake-shellcheck
    :hook (bash-ts-mode . flymake-shellcheck-mode))
#+end_src

*** makefile

auto enable makefile-mode for Makefiles

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("Makefile" . makefile-mode))
#+end_src

*** rust

use =rust-ts-mode= automatically on rust files and start eglot

#+begin_src emacs-lisp
  (add-hook 'rust-ts-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'rust-ts-mode-hook #'hs-minor-mode)
  (add-hook 'rust-ts-mode-hook #'hl-todo-mode)
  (add-hook 'rust-ts-mode-hook #'eglot)
#+end_src

** eglot

add keybindings for when in eglot-mode

#+begin_src emacs-lisp
      (use-package eglot
        :defer t
        :config
        (define-key eglot-mode-map (kbd "C-c c r") 'eglot-rename)
        (define-key eglot-mode-map (kbd "C-c c o") 'eglot-code-action-organize-imports)
        (define-key eglot-mode-map (kbd "C-c c h") 'eldoc)
        (define-key eglot-mode-map (kbd "C-c c a") 'eglot-code-actions)
        (define-key eglot-mode-map (kbd "C-c c f") 'eglot-format-buffer)
        (define-key eglot-mode-map (kbd "<f6>") 'xref-find-definitions)
        ;(define-key eglot-mode-map (kbd "M-.") 'xref-find-definitions)
        )
#+end_src

* applications
** dired
*** show file icons

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

*** show file size in human readable format

#+begin_src emacs-lisp
  (setq dired-listing-switches "-alh")
#+end_src

** vterm

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm)
#+end_src

** eshell

set M-RET shortcut for opening eshell

#+begin_src emacs-lisp
  (global-set-key (kbd "M-RET") 'eshell)
#+end_src

** htmlize

display current buffer as html

#+begin_src emacs-lisp
  (use-package htmlize
    :defer t)
#+end_src

** pdf-mode

better interaction with pdf

#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer t)
#+end_src

** emacs-everywhere *not working!*

use ~emacsclient --eval "(emacs-everywhere)"~ from another window when writing text to open this text in an Emacs buffer. Type =C-c C-c= to reinsert the edited text into the text field.

*Warning!* this does currently not work under wayland

#+begin_src emacs-lisp :tangle no
  (use-package emacs-everywhere)
#+end_src

* runtime performance

make gc pauses faster by decreasing the threshold, increasing the runtime performance

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src

* TODO
+ look at my doom config
+ use tabs for indentation and make them "sticky"???
+ when inserting a space at the end of a line in org, pressing enter will go to the new line and remove the space at the end
+ email mu4e: [[https://www.youtube.com/watch?v=yZRyEhi4y44&pp=ygULZW1hY3MgZW1haWw%3D][Streamline Your E-mail Management with mu4e - Emacs Mail - YouTube]]
+ handle passwords: [[https://www.youtube.com/watch?v=nZ_T7Q49B8Y][How to Encrypt Your Passwords with Emacs - YouTube]]
+ review nessecaty of org-mode looks, org-appear etc.
+ find a shell prompt that works with eshell and term
* look into
+ [[https://github.com/Fuco1/smartparens][GitHub - Fuco1/smartparens: Minor mode for Emacs that deals with parens pairs...]]
+ treemacs
+ projectile
+ ibuffer
+ deft
+ usefull but not needed
  ruby
  [[https://github.com/pezra/rspec-mode][GitHub - pezra/rspec-mode: An RSpec minor mode for Emacs]]
+ editorconfig
+ look into: [[https://github.com/SystemCrafters/crafted-emacs][GitHub - SystemCrafters/crafted-emacs: A sensible base Emacs configuration.]]
+ instead of auto-ts-mode [[https://github.com/emacs-tree-sitter/tree-sitter-langs][GitHub - emacs-tree-sitter/tree-sitter-langs: Language bundle for Emacs's tre...]]
+ ts-mode replaces c-mode so I can't change things like the cmode anymore
+ gcmh: dynamic garbage collection for improving speed
+ Combobulate: https://github.com/mickeynp/combobulate uses Tree-Sitter to provide a structured movement within your code [[https://www.masteringemacs.org/article/combobulate-structured-movement-editing-treesitter][Combobulate: Structured Movement and Editing with Tree-Sitter]]
+ crafted org config: [[file:~/crafted-emacs/docs/crafted-org.org]]
+ [[https://github.com/mclear-tools/tabspaces][GitHub - mclear-tools/tabspaces]]
** from doom
+ format+ onsave
+ grammar
+ =ctrl-a= should move to beginning of written line insead of actual line
