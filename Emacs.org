#+TITLE: Emacs config
#+AUTHOR: Felix Dumbeck
#+PROPERTY: header-args :emacs-lisp :tangle .config/emacs/init.el :results silent :mkdirp yes
#+auto_tangle: t

* preface

simple "performant" GNU emacs 29.1+ config that uses as much built in stuff as possible

Werks for me

* startup Performance

make emacs startup faster

** increase gc threshold

make gc less active by increasing its threshold during startup so emacs starts up faster

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))
  #+end_src
  
** use emacs server *disabled*

Start the Emacs server from this instance so that all =emacsclient= calls are routed here.

#+begin_src emacs-lisp :eval no :tangle no
  (server-start)
#+end_src

* package Management
** Setup package repos

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
  ;; make all use-package :ensure t
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

* keep .config/emacs clean

stop transient files from being created in the emacs config folder

** change user-emacs-directory *noeval*

change the user-emacs-directory to keep unwanted things out of ~/.config/emacs

#+begin_src emacs-lisp :eval no :tangle no
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))
#+end_src

** no-littering

use no-littering to automatically set common paths to the new user-emacs-directory

#+begin_src emacs-lisp
  (use-package no-littering
    :init
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src

** custom settings in temp file *noeval*

keep customization settings in a temporary file

#+begin_src emacs-lisp
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)
#+end_src

move customization variables to a sepereate file and load it *noeval*

#+begin_src emacs-lisp :eval no :tangle no
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
#+end_src

** auto generated files in tmp directory

keep backup files in a temporary directory

#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
#+end_src
  
keep  auto-save files in a temporary directory

#+begin_src emacs-lisp
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
        auto-save-file-name-transforms `((".*", (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
#+end_src

* keyboard bindings
** open config

shortcut to open the emacs config file with =C-c f P=

#+begin_src emacs-lisp
  (defun open-config ()
    "Opens emacs config file"
    (interactive)
    (setq find-file-visit-truename t)
    (find-file (locate-user-emacs-file "Emacs.org")))
  (global-set-key (kbd "C-c f P") 'open-config)

#+end_src
** kill buffer and close window

kill the current buffer and close its window with =C-x C-k=

#+begin_src emacs-lisp
  (defun kill-buffer-and-close-window ()
    "Kill the current buffer and close its window."
    (interactive)
    (kill-buffer)
    (delete-window))
  (global-set-key (kbd "C-x C-k") 'kill-buffer-and-close-window)
#+end_src

** kill line backwards

Kill line backwards from the position of the pointer to the beginning of the line. With =C-S-k=

#+begin_src emacs-lisp
  (defun kill-line-backward ()
    "Kill line backwards from the position of the pointer to the beginning of the line."
    (interactive)
    (kill-line 0))
  (global-set-key (kbd "C-S-k") 'kill-line-backward)
#+end_src

** which-key

which-key is great for getting an overview of what keybindings are available based on the prefix keys you entered.

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src

** folding

fold (collapse and expand) regions of text.

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'hs-minor-mode)
  (add-hook 'rust-ts-mode 'hs-minor-mode)
  (global-set-key (kbd "C-c f h") 'hs-hide-block)
  (global-set-key (kbd "C-c f s") 'hs-show-block)
  (global-set-key (kbd "C-c f t") 'hs-toggle-hiding)
#+end_src

** copy line

FIXME: currently copies the complete line from beginning instead of from current cursor position
copy the current line to the killring without deleting/killing it from the buffer

#+begin_src emacs-lisp
  (defun copy-line-to-kill-ring ()
    "Copy the current line to the kill ring without killing it."
    (interactive)
    (let ((line-text (buffer-substring (line-beginning-position) (line-end-position))))
      (kill-new line-text)))
  (global-set-key (kbd "C-S-c") 'copy-line)
#+end_src

* general
** user info

#+begin_src emacs-lisp
  (setq user-full-name "Felix"
        user-mail-address "f.dumbeck@campus.tu-berlin.de")
#+end_src

** user interface
*** behavoir

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

flash when the bell rings

#+begin_src  emacs-lisp
  (setq visible-bell t)
#+end_src

*** remove GUI elements

#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
#+end_src

*** lines

enable line highlighting

#+begin_src emacs-lisp
  (global-hl-line-mode t)
#+end_src

prettify symbols

#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src

enable line wrapping

#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src

line numbers

#+begin_src emacs-lisp
  (global-display-line-numbers-mode t) ;; enable line numbers
  (setq display-line-numbers-type 'relative) ;; make line numbers relative
#+end_src

** theme

picks a light color-theme when the sun is risen and a dark theme when the sun is set

#+begin_src emacs-lisp
  (use-package gruvbox-theme)
  (use-package circadian
    :config
    (setq calendar-latitude 52.5)
    (setq calendar-longitude 13.4)
    (setq circadian-themes '((:sunrise . gruvbox-light-soft)
                             (:sunset  . gruvbox-dark-soft)))
    (circadian-setup))
#+end_src

** font
*** icon font

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src

*** enable emojis ðŸ˜Ž

#+begin_src emacs-lisp
  (use-package emojify
    :init (emojify-mode))
#+end_src

** modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode t))
#+end_src

** various
*** show recently opened files first

#+begin_src emacs-lisp
  (recentf-mode t)
#+end_src

*** save location in file

#+begin_src emacs-lisp
  (save-place-mode t)
#+end_src

*** Revert buffers when the underlying file has changed

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

* completion System
** vertico
*** buffer autocompletion with vertico
#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
#+end_src
*** candidate meta information
meta information about vertico completion options (eg. file size, last edited)

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :init
    (marginalia-mode))
#+end_src
*** vertico candidate icons
icons for completion options 

#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :after (all-the-icons marginalia)
    :init (all-the-icons-completion-mode)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))
#+end_src
*** save command history
#+begin_src emacs-lisp
  (setq history-length 30)
  (savehist-mode t)
#+end_src

*** Improve Candidate Filtering with Orderless
improve vertico completions by allowing matches to search terms differently ordered

#+begin_src emacs-lisp
  (use-package orderless
    :after vertico
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
** company
enable autocompletion in code with company

#+begin_src emacs-lisp
  (use-package company
    :config
    (global-company-mode t))
#+end_src

enable autocompletion for emoji

#+begin_src emacs-lisp
  (use-package company-emoji
    :after company
    :init (company-emoji-init))

#+end_src
* org-mode
** defer startup

for an improved emacs startup time loading =org= is defered until it is actually needed

#+begin_src emacs-lisp
  (use-package org
    :defer t
    :commands (org-mode)
    )
#+end_src

** functionality

add contrib package for extra features and add org-tempo for expanding structual blocks from shortcuts eg. =<sTAB= will turn into =#+begin_src #+end_src=

#+begin_src emacs-lisp
  (use-package org-contrib
    :init (require 'org-tempo)
    :after org
    )
#+end_src

export org-mode files to html with hugo

#+begin_src emacs-lisp
  (use-package ox-hugo
    :after org
    :after ox
    :commands org-hugo-auto-export-mode)
#+end_src

** navigation

use M-p and M-n to go up and down org levels

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "M-p") 'org-up-element)))
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "M-n") 'org-down-element)))
#+end_src

** improve looks
*** general

#+begin_src emacs-lisp
  (setq org-startup-indented t
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-image-actual-width '(300))
#+end_src

*** Show hidden emphasis markers

#+begin_src emacs-lisp
  (use-package org-appear
    :hook (org-mode . org-appear-mode))
#+end_src

*** fonts and bullets

make bullet points and headings look nice

#+begin_src emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode))
#+end_src

change headings

#+begin_src emacs-lisp
  (custom-set-faces
   '(org-level-1 ((t (:height 1.75))))
   '(org-level-2 ((t (:height 1.5))))
   '(org-level-3 ((t (:height 1.25))))
   '(org-level-4 ((t (:height 1.1))))
   '(org-document-title ((t (:height 1.5)))))
#+end_src

give pasted links the title provided by the website

#+begin_src emacs-lisp
  (use-package org-cliplink
    :after org
    :bind ("C-x p i" . org-cliplink))
#+end_src

** table of contents

auto generate a table of contents and update on save

#+begin_src emacs-lisp
  (use-package org-make-toc
    :hook (org-mode . org-make-toc-mode))
#+end_src

** structure blocks
*** block templates

These templates enable you to type things like =<el= and then hit Tab to expand the template.

#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("ba" . "src bash"))
  (add-to-list 'org-structure-template-alist '("zs" . "src zsh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  (add-to-list 'org-structure-template-alist '("tex" . "src latex"))
  (add-to-list 'org-structure-template-alist '("rs" . "src rust"))
#+end_src

*** org-auto-tangle

when ~#+auto_tangle: t~ is set in the beginning of an org-file tangle all code blocks that are set to tangle

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

*** languages
**** rust

#+begin_src emacs-lisp :tangle no
  (use-package ob-rust
    :after org)
#+end_src

**** emacs-lisp

#+begin_src emacs-lisp :eval no :tangle no
  (use-package ob-doc-elisp
    :after org)
#+end_src

**** shell

support for sh

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)))
#+end_src

** drag-and-drop

Enable drag-and-drop support for images and files; inserts inline previews for images and an icon+link for other media types.

#+begin_src emacs-lisp
  (use-package org-download
    :hook (dired-mode . org-download-enable))
#+end_src

** org-roam

#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/Desktop/Notes"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode))
#+end_src

** org agenda

set a shortcut to open the agenda view

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c a") #'org-agenda)
#+end_src

insert a closed timestamp whenever a task is done

#+begin_src emacs-lisp :tangle no
  (setq org-log-done t)
#+end_src

make it so the agenda always starts yesterday and we can see +7 days from today instead of just until sunday

#+begin_src emacs-lisp
  (setq org-agenda-start-day "0d")
  (setq org-agenda-span 7)
  (setq org-agenda-start-on-weekday nil)
#+end_src

set org-agenda files

#+begin_src emacs-lisp
  (setq org-agenda-files
        '("~/Desktop/Uni/uni.org"
          "~/personal.org" ))
#+end_src

* editing configuration
** multiple cursors

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind ("M-SPC" . set-rectangular-region-anchor))
#+end_src

When you have an active region that spans multiple lines, the following will add a cursor to each line:

#+begin_src emacs-lisp
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
#+end_src

When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer, use:

#+begin_src emacs-lisp
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src

** folding
*** orgiami *disabled*

fold (collapse and expand) regions of text.

#+begin_src emacs-lisp :eval no :tangle no
  (use-package origami
    :hook (prog-mode . origami-mode)
#+end_src

** highlight todo

hightlight todo fixme etc.

#+begin_src emacs-lisp
  (use-package hl-todo
    :hook (prog-mode . hl-todo-mode)
    :config
    (setq hl-todo-keyword-faces
          '(("TODO"   . "#FF0000")
            ("FIXME"  . "#FF0000")
            ("DEBUG"  . "#A020F0")
            ("GOTCHA" . "#FF4500")
            ("STUB"   . "#1E90FF")))
    (keymap-set hl-todo-mode-map "C-c p" #'hl-todo-previous)
    (keymap-set hl-todo-mode-map "C-c P" #'hl-todo-next)
    (keymap-set hl-todo-mode-map "C-c o" #'hl-todo-occur)
    (keymap-set hl-todo-mode-map "C-c i" #'hl-todo-insert))
#+end_src

** rainbow delimiters

match brackets and other delimiters by colour to see the current scope more easily

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** electric pair mode

auto close braces, tags, etc.

#+begin_src emacs-lisp
  (setq electric-pair-mode t)
#+end_src

* development
** git
*** magit

#+begin_src emacs-lisp
  (use-package magit
    :commands magit)
#+end_src

to prevent being asked to type the ssh-key password on every action make it so magit knows the ssh-key-agents location:

#+begin_src emacs-lisp
  (use-package keychain-environment)
#+end_src

*** diff-hl

highlight uncommited, changed lines on the side of a buffer

#+begin_src emacs-lisp
  (use-package diff-hl
    :init (global-diff-hl-mode))
#+end_src

** treesitter

automatically detect the approriate treesitter mode dependant on the language mode

#+begin_src emacs-lisp
  (use-package treesit-auto
    :config
    (global-treesit-auto-mode))
  (setq treesit-auto-install 'prompt)
#+end_src

** format code

#+begin_src emacs-lisp
  (use-package format-all)
#+end_src

** languages
*** guile scheme

#+begin_src emacs-lisp
  (use-package geiser-guile)
#+end_src

*** python

show indentation

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :hook (python-ts-mode . highlight-indent-guides-mode))
#+end_src

*** shell

enable shellcheck using flymake for checking correctness and scanning common mistakes in shellcode

#+begin_src emacs-lisp
    (use-package flymake-shellcheck
      :hook (bash-ts-mode . flymake-shellcheck-mode))
#+end_src

*** rust
**** several hooks

use =rust-ts-mode= automatically on rust files and start eglot

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-ts-mode))
  (add-hook 'rust-ts-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'rust-ts-mode-hook #'hs-minor-mode)
  (add-hook 'rust-ts-mode-hook #'hl-todo-mode)
  ;; not needed beacause of rustic:
  ;(add-hook 'rust-ts-mode-hook #'eglot) ; 
#+end_src

**** rustic

add rustic for a better rust development experience

#+begin_src emacs-lisp
  (use-package rustic
    :defer t
    :hook (rust-ts-mode . rustic-mode)
    :config
    (setq rustic-lsp-client 'eglot))
#+end_src

** eglot
*** keybindings

add keybindings for eglot-mode

#+begin_src emacs-lisp
  (use-package eglot
    :defer t
    :config
    (define-key eglot-mode-map (kbd "C-c c r") 'eglot-rename)
    (define-key eglot-mode-map (kbd "C-c c o") 'eglot-code-action-organize-imports)
    (define-key eglot-mode-map (kbd "C-c c h") 'eldoc)
    (define-key eglot-mode-map (kbd "C-c c a") 'eglot-code-actions)
    (define-key eglot-mode-map (kbd "C-c c f") 'eglot-format-buffer)
    (define-key eglot-mode-map (kbd "<f6>") 'xref-find-definitions))
#+end_src

* applications
** dired

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** vterm

a full complete shell for emacs

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :bind ("M-RET" . vterm))
#+end_src

** htmlize

display current buffer as html

#+begin_src emacs-lisp
  (use-package htmlize
    :defer t)
#+end_src

** pdf-mode

better interaction with pdf

#+begin_src emacs-lisp
  (use-package pdf-tools)
#+end_src
** emacs-everywhere *not working!*

use ~emacsclient --eval "(emacs-everywhere)"~ from another window when writing text to open this text in an Emacs buffer. Type =C-c C-c= to reinsert the edited text into the text field.

*Warning!* this does currently not work under wayland
#+begin_src emacs-lisp :eval no :tangle no
  (use-package emacs-everywhere)
#+end_src

* system utilities *noeval*
** guix

#+begin_src emacs-lisp :tangle no
  (use-package guix)
#+end_src

* exwm *noeval*

#+begin_src emacs-lisp :tangle no
  (use-package exwm)
#+end_src

* runtime performance

make gc pauses faster by decreasing the threshold, increasing the runtime performance

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src

* TODO
+ auto enable hl-todo
+ flycheck
+ make vertico case insensetive
+ look at my doom config
+ use tabs for indentation and make them "sticky"???
+ when inserting a space at the end of a line in org, pressing enter will go to the new line and remove the space at the end
+ auto close brackets
+ email mu4e: [[https://www.youtube.com/watch?v=yZRyEhi4y44&pp=ygULZW1hY3MgZW1haWw%3D][Streamline Your E-mail Management with mu4e - Emacs Mail - YouTube]]
+ handle passwords: [[https://www.youtube.com/watch?v=nZ_T7Q49B8Y][How to Encrypt Your Passwords with Emacs - YouTube]]
+ review nessecaty of org-mode looks, org-appear etc.
* look into
+ treemacs
+ projectile
+ ibuffer
+ deft
+ usefull but not needed
  ruby
  [[https://github.com/pezra/rspec-mode][GitHub - pezra/rspec-mode: An RSpec minor mode for Emacs]]
+ editorconfig
+ look into: [[https://github.com/SystemCrafters/crafted-emacs][GitHub - SystemCrafters/crafted-emacs: A sensible base Emacs configuration.]]
+ autocompletion in org-mode code block. see crafted-emacs
+ code folding shortcuts (origami)
+ instead of auto-ts-mode [[https://github.com/emacs-tree-sitter/tree-sitter-langs][GitHub - emacs-tree-sitter/tree-sitter-langs: Language bundle for Emacs's tre...]]
+ ts-mode replaces c-mode so I can't change things like the cmode anymore
+ gcmh: dynamic garbage collection for improving speed
+ Combobulate: https://github.com/mickeynp/combobulate uses Tree-Sitter to provide a structured movement within your code [[https://www.masteringemacs.org/article/combobulate-structured-movement-editing-treesitter][Combobulate: Structured Movement and Editing with Tree-Sitter]]
+ ef-autumn theme
+ crafted org config: [[file:~/crafted-emacs/docs/crafted-org.org]]
** from doom
+ format+ onsave
+ show git changes in a line to the side
+ grammar
+ =ctrl-a= should move to beginning of written line insead of actual line
+ word-wrap


